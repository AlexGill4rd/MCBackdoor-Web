{"ast":null,"code":"var _jsxFileName = \"E:\\\\Sites\\\\virusv4\\\\Client\\\\src\\\\pages\\\\servercontrollers\\\\loggingcontroller\\\\LogginControllerPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { socket } from \"../../../socket/socket\";\nimport './LogginControllerPageStyle.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LogginControllerPage() {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const {\n    serverid\n  } = useParams();\n  const [server, setServer] = useState([]);\n  useEffect(function loadServer() {\n    socket.emit(\"client:mcserver-get\", serverid);\n  }, []);\n  useEffect(function updateServer() {\n    socket.on(`server:mcserver-get`, data => {\n      setServer(JSON.parse(data.JsonData));\n    });\n  }, []);\n  useEffect(function updateLogs() {\n    socket.on(\"server:update-logging\", data => {\n      if (data.Servername === server.Address) {\n        data = JSON.parse(data);\n        var message = [/*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"logging-panel-message-container-message-date\",\n            children: data.Date + \" - \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"logging-panel-message-container-message\",\n            children: data.Message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)];\n        setMessages(messages => [...messages, message]);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logging-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logging-panel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logging-panel-message-container\",\n        children: messages.map((message, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"logging-panel-message-container-message\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 25\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LogginControllerPage, \"g8zVnGgWtICCuqM9zaAq47sTMaA=\", false, function () {\n  return [useParams];\n});\n\n_c = LogginControllerPage;\nexport default LogginControllerPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogginControllerPage\");","map":{"version":3,"names":["useEffect","useState","useParams","socket","LogginControllerPage","messages","setMessages","serverid","server","setServer","loadServer","emit","updateServer","on","data","JSON","parse","JsonData","updateLogs","Servername","Address","message","Date","Message","map","index"],"sources":["E:/Sites/virusv4/Client/src/pages/servercontrollers/loggingcontroller/LogginControllerPage.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { socket } from \"../../../socket/socket\";\r\n\r\nimport './LogginControllerPageStyle.scss'\r\n\r\nfunction LogginControllerPage(){\r\n    const [messages, setMessages] = useState<any>([]);\r\n    const { serverid } = useParams();\r\n    const [server, setServer] = useState<any>([]);\r\n\r\n    useEffect(function loadServer(){\r\n        socket.emit(\"client:mcserver-get\", serverid)\r\n    }, []);\r\n    useEffect(function updateServer(){\r\n        socket.on(`server:mcserver-get`, data => {\r\n            setServer(JSON.parse(data.JsonData))\r\n        })\r\n    }, []);\r\n    useEffect(function updateLogs(){\r\n        socket.on(\"server:update-logging\", data => {\r\n            if (data.Servername === server.Address){\r\n                data = JSON.parse(data);\r\n                var message = [\r\n                    <>\r\n                        <span className=\"logging-panel-message-container-message-date\">\r\n                            {data.Date + \" - \"}\r\n                        </span>\r\n                        <span className=\"logging-panel-message-container-message\">\r\n                            {data.Message}\r\n                        </span>\r\n                    </>\r\n                ]\r\n                    \r\n                setMessages((messages: any) => [...messages, message]);\r\n            }\r\n        })\r\n    }, []);\r\n    return (\r\n        <div className=\"logging-container\">\r\n            <div className=\"logging-panel\">\r\n                <div className=\"logging-panel-message-container\">\r\n                    {messages.map((message: string, index: number) => {\r\n                        return (<div key={index}>\r\n                        <div  className=\"logging-panel-message-container-message\">\r\n                                {message}\r\n                            </div>\r\n                        </div>\r\n                            \r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default LogginControllerPage;"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,wBAAvB;AAEA,OAAO,kCAAP;;;;AAEA,SAASC,oBAAT,GAA+B;EAAA;;EAC3B,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAM,EAAN,CAAxC;EACA,MAAM;IAAEM;EAAF,IAAeL,SAAS,EAA9B;EACA,MAAM,CAACM,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAM,EAAN,CAApC;EAEAD,SAAS,CAAC,SAASU,UAAT,GAAqB;IAC3BP,MAAM,CAACQ,IAAP,CAAY,qBAAZ,EAAmCJ,QAAnC;EACH,CAFQ,EAEN,EAFM,CAAT;EAGAP,SAAS,CAAC,SAASY,YAAT,GAAuB;IAC7BT,MAAM,CAACU,EAAP,CAAW,qBAAX,EAAiCC,IAAI,IAAI;MACrCL,SAAS,CAACM,IAAI,CAACC,KAAL,CAAWF,IAAI,CAACG,QAAhB,CAAD,CAAT;IACH,CAFD;EAGH,CAJQ,EAIN,EAJM,CAAT;EAKAjB,SAAS,CAAC,SAASkB,UAAT,GAAqB;IAC3Bf,MAAM,CAACU,EAAP,CAAU,uBAAV,EAAmCC,IAAI,IAAI;MACvC,IAAIA,IAAI,CAACK,UAAL,KAAoBX,MAAM,CAACY,OAA/B,EAAuC;QACnCN,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;QACA,IAAIO,OAAO,GAAG,cACV;UAAA,wBACI;YAAM,SAAS,EAAC,8CAAhB;YAAA,UACKP,IAAI,CAACQ,IAAL,GAAY;UADjB;YAAA;YAAA;YAAA;UAAA,QADJ,eAII;YAAM,SAAS,EAAC,yCAAhB;YAAA,UACKR,IAAI,CAACS;UADV;YAAA;YAAA;YAAA;UAAA,QAJJ;QAAA,gBADU,CAAd;QAWAjB,WAAW,CAAED,QAAD,IAAmB,CAAC,GAAGA,QAAJ,EAAcgB,OAAd,CAApB,CAAX;MACH;IACJ,CAhBD;EAiBH,CAlBQ,EAkBN,EAlBM,CAAT;EAmBA,oBACI;IAAK,SAAS,EAAC,mBAAf;IAAA,uBACI;MAAK,SAAS,EAAC,eAAf;MAAA,uBACI;QAAK,SAAS,EAAC,iCAAf;QAAA,UACKhB,QAAQ,CAACmB,GAAT,CAAa,CAACH,OAAD,EAAkBI,KAAlB,KAAoC;UAC9C,oBAAQ;YAAA,uBACR;cAAM,SAAS,EAAC,yCAAhB;cAAA,UACSJ;YADT;cAAA;cAAA;cAAA;YAAA;UADQ,GAAUI,KAAV;YAAA;YAAA;YAAA;UAAA,QAAR;QAOH,CARA;MADL;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAiBH;;GAjDQrB,oB;UAEgBF,S;;;KAFhBE,oB;AAkDT,eAAeA,oBAAf"},"metadata":{},"sourceType":"module"}