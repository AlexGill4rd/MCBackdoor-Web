{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../utils/utils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat } from '../utils/text-field-helper';\nexport const useMaskedInput = _ref => {\n  let {\n    acceptRegex = /[\\d]/gi,\n    disabled,\n    disableMaskedInput,\n    ignoreInvalidInputs,\n    inputFormat,\n    inputProps,\n    label,\n    mask,\n    onChange,\n    rawValue,\n    readOnly,\n    rifmFormatter,\n    TextFieldProps,\n    validationError\n  } = _ref;\n  const utils = useUtils();\n  const [isFocused, setIsFocused] = React.useState(false);\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const shouldUseMaskedInput = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : st => st, [acceptRegex, mask, shouldUseMaskedInput]); // TODO: Implement with controlled vs uncontrolled `rawValue`\n\n  const currentInputValue = getDisplayDate(utils, rawValue, inputFormat);\n  const [innerInputValue, setInnerInputValue] = React.useState(currentInputValue);\n  const previousInputValueRef = React.useRef(currentInputValue);\n  React.useEffect(() => {\n    previousInputValueRef.current = currentInputValue;\n  }, [currentInputValue]);\n  const notTyping = !isFocused;\n  const valueChanged = previousInputValueRef.current !== currentInputValue; // Update the input value only if the value changed outside of typing\n\n  if (notTyping && valueChanged && (rawValue === null || utils.isValid(rawValue))) {\n    if (currentInputValue !== innerInputValue) {\n      setInnerInputValue(currentInputValue);\n    }\n  }\n\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps, {\n      onFocus: createDelegatedEventHandler(() => {\n        setIsFocused(true);\n      }, inputProps == null ? void 0 : inputProps.onFocus),\n      onBlur: createDelegatedEventHandler(() => {\n        setIsFocused(false);\n      }, inputProps == null ? void 0 : inputProps.onBlur)\n    })\n  }, TextFieldProps);\n};","map":{"version":3,"names":["_extends","React","useRifm","useUtils","createDelegatedEventHandler","maskedDateFormatter","getDisplayDate","checkMaskIsValidForCurrentFormat","useMaskedInput","acceptRegex","disabled","disableMaskedInput","ignoreInvalidInputs","inputFormat","inputProps","label","mask","onChange","rawValue","readOnly","rifmFormatter","TextFieldProps","validationError","utils","isFocused","setIsFocused","useState","formatHelperText","getFormatHelperText","shouldUseMaskedInput","useMemo","formatter","st","currentInputValue","innerInputValue","setInnerInputValue","previousInputValueRef","useRef","useEffect","current","notTyping","valueChanged","isValid","handleChange","text","finalString","date","parse","undefined","rifmProps","value","format","inputStateArgs","event","currentTarget","error","placeholder","type","onFocus","onBlur"],"sources":["E:/Sites/virus-v5-web/CLient/node_modules/@mui/x-date-pickers/internals/hooks/useMaskedInput.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../utils/utils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat } from '../utils/text-field-helper';\nexport const useMaskedInput = ({\n  acceptRegex = /[\\d]/gi,\n  disabled,\n  disableMaskedInput,\n  ignoreInvalidInputs,\n  inputFormat,\n  inputProps,\n  label,\n  mask,\n  onChange,\n  rawValue,\n  readOnly,\n  rifmFormatter,\n  TextFieldProps,\n  validationError\n}) => {\n  const utils = useUtils();\n  const [isFocused, setIsFocused] = React.useState(false);\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const shouldUseMaskedInput = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : st => st, [acceptRegex, mask, shouldUseMaskedInput]); // TODO: Implement with controlled vs uncontrolled `rawValue`\n\n  const currentInputValue = getDisplayDate(utils, rawValue, inputFormat);\n  const [innerInputValue, setInnerInputValue] = React.useState(currentInputValue);\n  const previousInputValueRef = React.useRef(currentInputValue);\n  React.useEffect(() => {\n    previousInputValueRef.current = currentInputValue;\n  }, [currentInputValue]);\n  const notTyping = !isFocused;\n  const valueChanged = previousInputValueRef.current !== currentInputValue; // Update the input value only if the value changed outside of typing\n\n  if (notTyping && valueChanged && (rawValue === null || utils.isValid(rawValue))) {\n    if (currentInputValue !== innerInputValue) {\n      setInnerInputValue(currentInputValue);\n    }\n  }\n\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps, {\n      onFocus: createDelegatedEventHandler(() => {\n        setIsFocused(true);\n      }, inputProps == null ? void 0 : inputProps.onFocus),\n      onBlur: createDelegatedEventHandler(() => {\n        setIsFocused(false);\n      }, inputProps == null ? void 0 : inputProps.onBlur)\n    })\n  }, TextFieldProps);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}