{"ast":null,"code":"import * as React from 'react';\nexport const useOpenState = _ref => {\n  let {\n    open,\n    onOpen,\n    onClose\n  } = _ref;\n  const isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n  const [openState, setIsOpenState] = React.useState(false); // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n\n  React.useEffect(() => {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n\n      setIsOpenState(open);\n    }\n  }, [isControllingOpenProp, open]);\n  const setIsOpen = React.useCallback(newIsOpen => {\n    if (!isControllingOpenProp) {\n      setIsOpenState(newIsOpen);\n    }\n\n    if (newIsOpen && onOpen) {\n      onOpen();\n    }\n\n    if (!newIsOpen && onClose) {\n      onClose();\n    }\n  }, [isControllingOpenProp, onOpen, onClose]);\n  return {\n    isOpen: openState,\n    setIsOpen\n  };\n};","map":{"version":3,"names":["React","useOpenState","open","onOpen","onClose","isControllingOpenProp","useRef","current","openState","setIsOpenState","useState","useEffect","Error","setIsOpen","useCallback","newIsOpen","isOpen"],"sources":["E:/Sites/virusv4/Client/node_modules/@mui/x-date-pickers/internals/hooks/useOpenState.js"],"sourcesContent":["import * as React from 'react';\nexport const useOpenState = ({\n  open,\n  onOpen,\n  onClose\n}) => {\n  const isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n  const [openState, setIsOpenState] = React.useState(false); // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n\n  React.useEffect(() => {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n\n      setIsOpenState(open);\n    }\n  }, [isControllingOpenProp, open]);\n  const setIsOpen = React.useCallback(newIsOpen => {\n    if (!isControllingOpenProp) {\n      setIsOpenState(newIsOpen);\n    }\n\n    if (newIsOpen && onOpen) {\n      onOpen();\n    }\n\n    if (!newIsOpen && onClose) {\n      onClose();\n    }\n  }, [isControllingOpenProp, onOpen, onClose]);\n  return {\n    isOpen: openState,\n    setIsOpen\n  };\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAMC,YAAY,GAAG,QAItB;EAAA,IAJuB;IAC3BC,IAD2B;IAE3BC,MAF2B;IAG3BC;EAH2B,CAIvB;EACJ,MAAMC,qBAAqB,GAAGL,KAAK,CAACM,MAAN,CAAa,OAAOJ,IAAP,KAAgB,SAA7B,EAAwCK,OAAtE;EACA,MAAM,CAACC,SAAD,EAAYC,cAAZ,IAA8BT,KAAK,CAACU,QAAN,CAAe,KAAf,CAApC,CAFI,CAEuD;EAC3D;;EAEAV,KAAK,CAACW,SAAN,CAAgB,MAAM;IACpB,IAAIN,qBAAJ,EAA2B;MACzB,IAAI,OAAOH,IAAP,KAAgB,SAApB,EAA+B;QAC7B,MAAM,IAAIU,KAAJ,CAAU,oEAAV,CAAN;MACD;;MAEDH,cAAc,CAACP,IAAD,CAAd;IACD;EACF,CARD,EAQG,CAACG,qBAAD,EAAwBH,IAAxB,CARH;EASA,MAAMW,SAAS,GAAGb,KAAK,CAACc,WAAN,CAAkBC,SAAS,IAAI;IAC/C,IAAI,CAACV,qBAAL,EAA4B;MAC1BI,cAAc,CAACM,SAAD,CAAd;IACD;;IAED,IAAIA,SAAS,IAAIZ,MAAjB,EAAyB;MACvBA,MAAM;IACP;;IAED,IAAI,CAACY,SAAD,IAAcX,OAAlB,EAA2B;MACzBA,OAAO;IACR;EACF,CAZiB,EAYf,CAACC,qBAAD,EAAwBF,MAAxB,EAAgCC,OAAhC,CAZe,CAAlB;EAaA,OAAO;IACLY,MAAM,EAAER,SADH;IAELK;EAFK,CAAP;AAID,CAnCM"},"metadata":{},"sourceType":"module"}