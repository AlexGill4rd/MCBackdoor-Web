{"ast":null,"code":"export function getTextFieldAriaText(rawValue, utils) {\n  // TODO: should `isValid` narrow `TDate | null` to `NonNullable<TDate>`?\n  // Either we allow `TDate | null` to be valid and guard against calling `formatByString` with `null`.\n  // Or we ensure `formatByString` is callable with `null`.\n  return rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choose date';\n}\nexport const getDisplayDate = (utils, rawValue, inputFormat) => {\n  const date = utils.date(rawValue);\n  const isEmpty = rawValue === null;\n\n  if (isEmpty) {\n    return '';\n  }\n\n  return utils.isValid(date) ? utils.formatByString( // TODO: should `isValid` narrow `TDate | null` to `NonNullable<TDate>`?\n  // Either we allow `TDate | null` to be valid and guard against calling `formatByString` with `null`.\n  // Or we ensure `formatByString` is callable with `null`.\n  date, inputFormat) : '';\n};\nconst MASK_USER_INPUT_SYMBOL = '_';\nconst staticDateWith2DigitTokens = '2019-11-21T22:30:00.000';\nconst staticDateWith1DigitTokens = '2019-01-01T09:00:00.000';\nexport function checkMaskIsValidForCurrentFormat(mask, format, acceptRegex, utils) {\n  const formattedDateWith1Digit = utils.formatByString(utils.date(staticDateWith1DigitTokens), format);\n  const inferredFormatPatternWith1Digits = formattedDateWith1Digit.replace(acceptRegex, MASK_USER_INPUT_SYMBOL);\n  const inferredFormatPatternWith2Digits = utils.formatByString(utils.date(staticDateWith2DigitTokens), format).replace(acceptRegex, '_');\n  const isMaskValid = inferredFormatPatternWith2Digits === mask && inferredFormatPatternWith1Digits === mask;\n\n  if (!isMaskValid && utils.lib !== 'luxon' && process.env.NODE_ENV !== 'production') {\n    const defaultWarning = [`The mask \"${mask}\" you passed is not valid for the format used ${format}.`, `Falling down to uncontrolled no-mask input.`];\n\n    if (format.includes('MMM')) {\n      console.warn([...defaultWarning, `Mask does not support literals such as 'MMM'.`, `Either use numbers with fix length or disable mask feature with 'disableMaskedInput' prop`].join('\\n'));\n    } else if (inferredFormatPatternWith2Digits !== mask && inferredFormatPatternWith1Digits === mask) {\n      console.warn([...defaultWarning, `Mask does not support numbers with variable length such as 'M'.`, `Either use numbers with fix length or disable mask feature with 'disableMaskedInput' prop`].join('\\n'));\n    } else {\n      console.warn(defaultWarning.join('\\n'));\n    }\n  }\n\n  return isMaskValid;\n}\nexport const maskedDateFormatter = (mask, acceptRegexp) => value => {\n  let outputCharIndex = 0;\n  return value.split('').map((char, inputCharIndex) => {\n    acceptRegexp.lastIndex = 0;\n\n    if (outputCharIndex > mask.length - 1) {\n      return '';\n    }\n\n    const maskChar = mask[outputCharIndex];\n    const nextMaskChar = mask[outputCharIndex + 1];\n    const acceptedChar = acceptRegexp.test(char) ? char : '';\n    const formattedChar = maskChar === MASK_USER_INPUT_SYMBOL ? acceptedChar : maskChar + acceptedChar;\n    outputCharIndex += formattedChar.length;\n    const isLastCharacter = inputCharIndex === value.length - 1;\n\n    if (isLastCharacter && nextMaskChar && nextMaskChar !== MASK_USER_INPUT_SYMBOL) {\n      // when cursor at the end of mask part (e.g. month) prerender next symbol \"21\" -> \"21/\"\n      return formattedChar ? formattedChar + nextMaskChar : '';\n    }\n\n    return formattedChar;\n  }).join('');\n};","map":{"version":3,"names":["getTextFieldAriaText","rawValue","utils","isValid","date","format","getDisplayDate","inputFormat","isEmpty","formatByString","MASK_USER_INPUT_SYMBOL","staticDateWith2DigitTokens","staticDateWith1DigitTokens","checkMaskIsValidForCurrentFormat","mask","acceptRegex","formattedDateWith1Digit","inferredFormatPatternWith1Digits","replace","inferredFormatPatternWith2Digits","isMaskValid","lib","process","env","NODE_ENV","defaultWarning","includes","console","warn","join","maskedDateFormatter","acceptRegexp","value","outputCharIndex","split","map","char","inputCharIndex","lastIndex","length","maskChar","nextMaskChar","acceptedChar","test","formattedChar","isLastCharacter"],"sources":["E:/Sites/virus-v5-web/CLient/node_modules/@mui/x-date-pickers/internals/utils/text-field-helper.js"],"sourcesContent":["export function getTextFieldAriaText(rawValue, utils) {\n  // TODO: should `isValid` narrow `TDate | null` to `NonNullable<TDate>`?\n  // Either we allow `TDate | null` to be valid and guard against calling `formatByString` with `null`.\n  // Or we ensure `formatByString` is callable with `null`.\n  return rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choose date';\n}\nexport const getDisplayDate = (utils, rawValue, inputFormat) => {\n  const date = utils.date(rawValue);\n  const isEmpty = rawValue === null;\n\n  if (isEmpty) {\n    return '';\n  }\n\n  return utils.isValid(date) ? utils.formatByString( // TODO: should `isValid` narrow `TDate | null` to `NonNullable<TDate>`?\n  // Either we allow `TDate | null` to be valid and guard against calling `formatByString` with `null`.\n  // Or we ensure `formatByString` is callable with `null`.\n  date, inputFormat) : '';\n};\nconst MASK_USER_INPUT_SYMBOL = '_';\nconst staticDateWith2DigitTokens = '2019-11-21T22:30:00.000';\nconst staticDateWith1DigitTokens = '2019-01-01T09:00:00.000';\nexport function checkMaskIsValidForCurrentFormat(mask, format, acceptRegex, utils) {\n  const formattedDateWith1Digit = utils.formatByString(utils.date(staticDateWith1DigitTokens), format);\n  const inferredFormatPatternWith1Digits = formattedDateWith1Digit.replace(acceptRegex, MASK_USER_INPUT_SYMBOL);\n  const inferredFormatPatternWith2Digits = utils.formatByString(utils.date(staticDateWith2DigitTokens), format).replace(acceptRegex, '_');\n  const isMaskValid = inferredFormatPatternWith2Digits === mask && inferredFormatPatternWith1Digits === mask;\n\n  if (!isMaskValid && utils.lib !== 'luxon' && process.env.NODE_ENV !== 'production') {\n    const defaultWarning = [`The mask \"${mask}\" you passed is not valid for the format used ${format}.`, `Falling down to uncontrolled no-mask input.`];\n\n    if (format.includes('MMM')) {\n      console.warn([...defaultWarning, `Mask does not support literals such as 'MMM'.`, `Either use numbers with fix length or disable mask feature with 'disableMaskedInput' prop`].join('\\n'));\n    } else if (inferredFormatPatternWith2Digits !== mask && inferredFormatPatternWith1Digits === mask) {\n      console.warn([...defaultWarning, `Mask does not support numbers with variable length such as 'M'.`, `Either use numbers with fix length or disable mask feature with 'disableMaskedInput' prop`].join('\\n'));\n    } else {\n      console.warn(defaultWarning.join('\\n'));\n    }\n  }\n\n  return isMaskValid;\n}\nexport const maskedDateFormatter = (mask, acceptRegexp) => value => {\n  let outputCharIndex = 0;\n  return value.split('').map((char, inputCharIndex) => {\n    acceptRegexp.lastIndex = 0;\n\n    if (outputCharIndex > mask.length - 1) {\n      return '';\n    }\n\n    const maskChar = mask[outputCharIndex];\n    const nextMaskChar = mask[outputCharIndex + 1];\n    const acceptedChar = acceptRegexp.test(char) ? char : '';\n    const formattedChar = maskChar === MASK_USER_INPUT_SYMBOL ? acceptedChar : maskChar + acceptedChar;\n    outputCharIndex += formattedChar.length;\n    const isLastCharacter = inputCharIndex === value.length - 1;\n\n    if (isLastCharacter && nextMaskChar && nextMaskChar !== MASK_USER_INPUT_SYMBOL) {\n      // when cursor at the end of mask part (e.g. month) prerender next symbol \"21\" -> \"21/\"\n      return formattedChar ? formattedChar + nextMaskChar : '';\n    }\n\n    return formattedChar;\n  }).join('');\n};"],"mappings":"AAAA,OAAO,SAASA,oBAAT,CAA8BC,QAA9B,EAAwCC,KAAxC,EAA+C;EACpD;EACA;EACA;EACA,OAAOD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,GAAmD,iCAAgCC,KAAK,CAACG,MAAN,CAAaH,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA+C,EAAlI,GAAsI,aAA7I;AACD;AACD,OAAO,MAAMK,cAAc,GAAG,CAACJ,KAAD,EAAQD,QAAR,EAAkBM,WAAlB,KAAkC;EAC9D,MAAMH,IAAI,GAAGF,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb;EACA,MAAMO,OAAO,GAAGP,QAAQ,KAAK,IAA7B;;EAEA,IAAIO,OAAJ,EAAa;IACX,OAAO,EAAP;EACD;;EAED,OAAON,KAAK,CAACC,OAAN,CAAcC,IAAd,IAAsBF,KAAK,CAACO,cAAN,EAAsB;EACnD;EACA;EACAL,IAH6B,EAGvBG,WAHuB,CAAtB,GAGc,EAHrB;AAID,CAZM;AAaP,MAAMG,sBAAsB,GAAG,GAA/B;AACA,MAAMC,0BAA0B,GAAG,yBAAnC;AACA,MAAMC,0BAA0B,GAAG,yBAAnC;AACA,OAAO,SAASC,gCAAT,CAA0CC,IAA1C,EAAgDT,MAAhD,EAAwDU,WAAxD,EAAqEb,KAArE,EAA4E;EACjF,MAAMc,uBAAuB,GAAGd,KAAK,CAACO,cAAN,CAAqBP,KAAK,CAACE,IAAN,CAAWQ,0BAAX,CAArB,EAA6DP,MAA7D,CAAhC;EACA,MAAMY,gCAAgC,GAAGD,uBAAuB,CAACE,OAAxB,CAAgCH,WAAhC,EAA6CL,sBAA7C,CAAzC;EACA,MAAMS,gCAAgC,GAAGjB,KAAK,CAACO,cAAN,CAAqBP,KAAK,CAACE,IAAN,CAAWO,0BAAX,CAArB,EAA6DN,MAA7D,EAAqEa,OAArE,CAA6EH,WAA7E,EAA0F,GAA1F,CAAzC;EACA,MAAMK,WAAW,GAAGD,gCAAgC,KAAKL,IAArC,IAA6CG,gCAAgC,KAAKH,IAAtG;;EAEA,IAAI,CAACM,WAAD,IAAgBlB,KAAK,CAACmB,GAAN,KAAc,OAA9B,IAAyCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAtE,EAAoF;IAClF,MAAMC,cAAc,GAAG,CAAE,aAAYX,IAAK,iDAAgDT,MAAO,GAA1E,EAA+E,6CAA/E,CAAvB;;IAEA,IAAIA,MAAM,CAACqB,QAAP,CAAgB,KAAhB,CAAJ,EAA4B;MAC1BC,OAAO,CAACC,IAAR,CAAa,CAAC,GAAGH,cAAJ,EAAqB,+CAArB,EAAsE,2FAAtE,EAAkKI,IAAlK,CAAuK,IAAvK,CAAb;IACD,CAFD,MAEO,IAAIV,gCAAgC,KAAKL,IAArC,IAA6CG,gCAAgC,KAAKH,IAAtF,EAA4F;MACjGa,OAAO,CAACC,IAAR,CAAa,CAAC,GAAGH,cAAJ,EAAqB,iEAArB,EAAwF,2FAAxF,EAAoLI,IAApL,CAAyL,IAAzL,CAAb;IACD,CAFM,MAEA;MACLF,OAAO,CAACC,IAAR,CAAaH,cAAc,CAACI,IAAf,CAAoB,IAApB,CAAb;IACD;EACF;;EAED,OAAOT,WAAP;AACD;AACD,OAAO,MAAMU,mBAAmB,GAAG,CAAChB,IAAD,EAAOiB,YAAP,KAAwBC,KAAK,IAAI;EAClE,IAAIC,eAAe,GAAG,CAAtB;EACA,OAAOD,KAAK,CAACE,KAAN,CAAY,EAAZ,EAAgBC,GAAhB,CAAoB,CAACC,IAAD,EAAOC,cAAP,KAA0B;IACnDN,YAAY,CAACO,SAAb,GAAyB,CAAzB;;IAEA,IAAIL,eAAe,GAAGnB,IAAI,CAACyB,MAAL,GAAc,CAApC,EAAuC;MACrC,OAAO,EAAP;IACD;;IAED,MAAMC,QAAQ,GAAG1B,IAAI,CAACmB,eAAD,CAArB;IACA,MAAMQ,YAAY,GAAG3B,IAAI,CAACmB,eAAe,GAAG,CAAnB,CAAzB;IACA,MAAMS,YAAY,GAAGX,YAAY,CAACY,IAAb,CAAkBP,IAAlB,IAA0BA,IAA1B,GAAiC,EAAtD;IACA,MAAMQ,aAAa,GAAGJ,QAAQ,KAAK9B,sBAAb,GAAsCgC,YAAtC,GAAqDF,QAAQ,GAAGE,YAAtF;IACAT,eAAe,IAAIW,aAAa,CAACL,MAAjC;IACA,MAAMM,eAAe,GAAGR,cAAc,KAAKL,KAAK,CAACO,MAAN,GAAe,CAA1D;;IAEA,IAAIM,eAAe,IAAIJ,YAAnB,IAAmCA,YAAY,KAAK/B,sBAAxD,EAAgF;MAC9E;MACA,OAAOkC,aAAa,GAAGA,aAAa,GAAGH,YAAnB,GAAkC,EAAtD;IACD;;IAED,OAAOG,aAAP;EACD,CApBM,EAoBJf,IApBI,CAoBC,EApBD,CAAP;AAqBD,CAvBM"},"metadata":{},"sourceType":"module"}