{"ast":null,"code":"import * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport { ActionTypes } from './useListbox.types';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\nfunction useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {\n  const valueRef = React.useRef(value);\n  valueRef.current = value;\n  const onValueChangeRef = React.useRef(onValueChange);\n  React.useEffect(() => {\n    onValueChangeRef.current = onValueChange;\n  }, [onValueChange]);\n  const onHighlightChangeRef = React.useRef(onHighlightChange);\n  React.useEffect(() => {\n    onHighlightChangeRef.current = onHighlightChange;\n  }, [onHighlightChange]);\n  React.useEffect(() => {\n    if (Array.isArray(state.selectedValue)) {\n      if (areArraysEqual(state.selectedValue, valueRef.current)) {\n        return;\n      }\n    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {\n      return;\n    }\n\n    setValueState(state.selectedValue);\n\n    if (state.selectedValue != null) {\n      var _onValueChangeRef$cur; // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.\n\n\n      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);\n    }\n  }, [state.selectedValue, setValueState, optionComparer]);\n  React.useEffect(() => {\n    var _onHighlightChangeRef; // Fire the highlightChange event when reducer returns changed `highlightedIndex`.\n\n\n    (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, state.highlightedValue);\n  }, [state.highlightedValue]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  const {\n    value: controlledValue,\n    defaultValue,\n    onChange: onValueChange,\n    onHighlightChange,\n    options,\n    optionComparer\n  } = props;\n  const propsRef = React.useRef(props);\n  propsRef.current = props;\n  const [value, setValueState] = useControlled({\n    controlled: controlledValue,\n    default: defaultValue,\n    name: 'useListbox'\n  });\n  const previousValueRef = React.useRef(null);\n  const [state, dispatch] = React.useReducer(externalReducer != null ? externalReducer : internalReducer, {\n    highlightedValue: null,\n    selectedValue: value\n  });\n  const optionComparerRef = React.useRef(optionComparer);\n  optionComparerRef.current = optionComparer;\n  React.useEffect(() => {\n    // Detect external changes to the controlled `value` prop and update the state.\n    if (controlledValue === undefined) {\n      return;\n    }\n\n    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && areArraysEqual(previousValueRef.current, controlledValue, optionComparerRef.current)) {\n      // `value` is an array and it did not change.\n      return;\n    }\n\n    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {\n      // `value` is a single option and it did not change.\n      return;\n    }\n\n    previousValueRef.current = controlledValue;\n    dispatch({\n      type: ActionTypes.setValue,\n      value: controlledValue\n    });\n  }, [controlledValue]);\n  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);\n  return [state, dispatch];\n}","map":{"version":3,"names":["React","unstable_useControlled","useControlled","ActionTypes","areArraysEqual","useReducerReturnValueHandler","state","value","options","optionComparer","setValueState","onValueChange","onHighlightChange","valueRef","useRef","current","onValueChangeRef","useEffect","onHighlightChangeRef","Array","isArray","selectedValue","_onValueChangeRef$cur","call","_onHighlightChangeRef","highlightedValue","useControllableReducer","internalReducer","externalReducer","props","controlledValue","defaultValue","onChange","propsRef","controlled","default","name","previousValueRef","dispatch","useReducer","optionComparerRef","undefined","type","setValue"],"sources":["E:/Sites/virusv4/CLient/node_modules/@mui/base/ListboxUnstyled/useControllableReducer.js"],"sourcesContent":["import * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport { ActionTypes } from './useListbox.types';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\nfunction useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {\n  const valueRef = React.useRef(value);\n  valueRef.current = value;\n  const onValueChangeRef = React.useRef(onValueChange);\n  React.useEffect(() => {\n    onValueChangeRef.current = onValueChange;\n  }, [onValueChange]);\n  const onHighlightChangeRef = React.useRef(onHighlightChange);\n  React.useEffect(() => {\n    onHighlightChangeRef.current = onHighlightChange;\n  }, [onHighlightChange]);\n  React.useEffect(() => {\n    if (Array.isArray(state.selectedValue)) {\n      if (areArraysEqual(state.selectedValue, valueRef.current)) {\n        return;\n      }\n    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {\n      return;\n    }\n\n    setValueState(state.selectedValue);\n\n    if (state.selectedValue != null) {\n      var _onValueChangeRef$cur;\n\n      // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.\n      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);\n    }\n  }, [state.selectedValue, setValueState, optionComparer]);\n  React.useEffect(() => {\n    var _onHighlightChangeRef;\n\n    // Fire the highlightChange event when reducer returns changed `highlightedIndex`.\n    (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, state.highlightedValue);\n  }, [state.highlightedValue]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  const {\n    value: controlledValue,\n    defaultValue,\n    onChange: onValueChange,\n    onHighlightChange,\n    options,\n    optionComparer\n  } = props;\n  const propsRef = React.useRef(props);\n  propsRef.current = props;\n  const [value, setValueState] = useControlled({\n    controlled: controlledValue,\n    default: defaultValue,\n    name: 'useListbox'\n  });\n  const previousValueRef = React.useRef(null);\n  const [state, dispatch] = React.useReducer(externalReducer != null ? externalReducer : internalReducer, {\n    highlightedValue: null,\n    selectedValue: value\n  });\n  const optionComparerRef = React.useRef(optionComparer);\n  optionComparerRef.current = optionComparer;\n  React.useEffect(() => {\n    // Detect external changes to the controlled `value` prop and update the state.\n    if (controlledValue === undefined) {\n      return;\n    }\n\n    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && areArraysEqual(previousValueRef.current, controlledValue, optionComparerRef.current)) {\n      // `value` is an array and it did not change.\n      return;\n    }\n\n    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {\n      // `value` is a single option and it did not change.\n      return;\n    }\n\n    previousValueRef.current = controlledValue;\n    dispatch({\n      type: ActionTypes.setValue,\n      value: controlledValue\n    });\n  }, [controlledValue]);\n  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);\n  return [state, dispatch];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}