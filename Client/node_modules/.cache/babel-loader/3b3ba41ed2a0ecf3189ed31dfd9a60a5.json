{"ast":null,"code":"var _jsxFileName = \"E:\\\\Sites\\\\virusv4\\\\Client\\\\src\\\\pages\\\\serverpage\\\\components\\\\ServerList.tsx\",\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport IpAddress from '../../../IpAddress';\nimport ServerTab from './ServerTab';\nimport socketIOClient from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ip = new IpAddress();\nlet socket = socketIOClient(`http://${ip.getIP()}:3001/`);\n\nfunction ServerList() {\n  _s2();\n\n  const [servers, setServers] = useState([]);\n  useEffect(() => {\n    var _s = $RefreshSig$();\n\n    socket.emit(\"client:get-servers\");\n    socket.on(`server:active-server`, data => {\n      setServers(servers => [...servers, data]);\n    });\n\n    _s(socket.on(`server:server-disconnect`, _s(data => {\n      _s();\n\n      console.log(data);\n      const [prevServer, setPrevServer] = useState();\n      servers.forEach(server => {\n        if (server.Name === data.Name) {\n          setPrevServer(server);\n        }\n      });\n      console.log(prevServer);\n      prevServer.State = data.State;\n      setServers(servers => servers.filter(server => server === data.Name));\n      setServers(servers => [...servers, prevServer]);\n    }, \"aYJSJzWBjqj7PwpYrQ1CZ+CbkRg=\")), \"aYJSJzWBjqj7PwpYrQ1CZ+CbkRg=\");\n  }, []);\n\n  if (servers.length > 0) {\n    return servers.map(server => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ServerTab, {\n        server: server\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, server.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this));\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Geen servers actief!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this);\n  }\n}\n\n_s2(ServerList, \"xfSG+wryFcgzvchjWZabd3QMWJw=\");\n\n_c = ServerList;\nexport default ServerList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ServerList\");","map":{"version":3,"names":["useEffect","useState","IpAddress","ServerTab","socketIOClient","ip","socket","getIP","ServerList","servers","setServers","emit","on","data","console","log","prevServer","setPrevServer","forEach","server","Name","State","filter","length","map","id"],"sources":["E:/Sites/virusv4/Client/src/pages/serverpage/components/ServerList.tsx"],"sourcesContent":["import { Key, useEffect, useState } from 'react';\r\nimport IpAddress from '../../../IpAddress';\r\nimport ServerTab from './ServerTab';\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { stringify } from 'querystring';\r\nvar ip = new IpAddress();\r\nlet socket = socketIOClient(`http://${ip.getIP()}:3001/`)\r\n\r\nfunction ServerList(){\r\n    const [servers, setServers] = useState<any>([]);\r\n\r\n    useEffect(() => {\r\n        socket.emit(\"client:get-servers\");\r\n        socket.on(`server:active-server`, data => {\r\n            setServers((servers: any) => [...servers, data]);\r\n        })\r\n        socket.on(`server:server-disconnect`, data => {\r\n            console.log(data)\r\n            const [prevServer, setPrevServer] = useState<any>();\r\n            servers.forEach((server: { Name: string; }) => {\r\n                if (server.Name === data.Name){\r\n                    setPrevServer(server);\r\n                }\r\n            });\r\n            console.log(prevServer)\r\n            prevServer.State = data.State;\r\n            setServers((servers: any) => servers.filter((server: any) => server === data.Name));\r\n            setServers((servers: any) => [...servers, prevServer]);\r\n        })\r\n    }, []);\r\n    if (servers.length > 0){\r\n        return (\r\n            servers.map((server: {id: number}) => \r\n            <div key={server.id}>{\r\n                <ServerTab server={server}/>\r\n            }</div>)\r\n        );\r\n    }else{\r\n        return <div>Geen servers actief!</div>\r\n    }\r\n}\r\nexport default ServerList;"],"mappings":";;;AAAA,SAAcA,SAAd,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,IAAIC,EAAE,GAAG,IAAIH,SAAJ,EAAT;AACA,IAAII,MAAM,GAAGF,cAAc,CAAE,UAASC,EAAE,CAACE,KAAH,EAAW,QAAtB,CAA3B;;AAEA,SAASC,UAAT,GAAqB;EAAA;;EACjB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAM,EAAN,CAAtC;EAEAD,SAAS,CAAC,MAAM;IAAA;;IACZM,MAAM,CAACK,IAAP,CAAY,oBAAZ;IACAL,MAAM,CAACM,EAAP,CAAW,sBAAX,EAAkCC,IAAI,IAAI;MACtCH,UAAU,CAAED,OAAD,IAAkB,CAAC,GAAGA,OAAJ,EAAaI,IAAb,CAAnB,CAAV;IACH,CAFD;;IAGA,GAAAP,MAAM,CAACM,EAAP,CAAW,0BAAX,KAAsCC,IAAI,IAAI;MAAA;;MAC1CC,OAAO,CAACC,GAAR,CAAYF,IAAZ;MACA,MAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,EAA5C;MACAQ,OAAO,CAACS,OAAR,CAAiBC,MAAD,IAA+B;QAC3C,IAAIA,MAAM,CAACC,IAAP,KAAgBP,IAAI,CAACO,IAAzB,EAA8B;UAC1BH,aAAa,CAACE,MAAD,CAAb;QACH;MACJ,CAJD;MAKAL,OAAO,CAACC,GAAR,CAAYC,UAAZ;MACAA,UAAU,CAACK,KAAX,GAAmBR,IAAI,CAACQ,KAAxB;MACAX,UAAU,CAAED,OAAD,IAAkBA,OAAO,CAACa,MAAR,CAAgBH,MAAD,IAAiBA,MAAM,KAAKN,IAAI,CAACO,IAAhD,CAAnB,CAAV;MACAV,UAAU,CAAED,OAAD,IAAkB,CAAC,GAAGA,OAAJ,EAAaO,UAAb,CAAnB,CAAV;IACH,CAZD;EAaH,CAlBQ,EAkBN,EAlBM,CAAT;;EAmBA,IAAIP,OAAO,CAACc,MAAR,GAAiB,CAArB,EAAuB;IACnB,OACId,OAAO,CAACe,GAAR,CAAaL,MAAD,iBACZ;MAAA,uBACI,QAAC,SAAD;QAAW,MAAM,EAAEA;MAAnB;QAAA;QAAA;QAAA;MAAA;IADJ,GAAUA,MAAM,CAACM,EAAjB;MAAA;MAAA;MAAA;IAAA,QADA,CADJ;EAMH,CAPD,MAOK;IACD,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACH;AACJ;;IAhCQjB,U;;KAAAA,U;AAiCT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}