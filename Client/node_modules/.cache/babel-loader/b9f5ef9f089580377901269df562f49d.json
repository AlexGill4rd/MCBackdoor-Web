{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport function isPlainObject(item) {\n  return item !== null && typeof item === 'object' && item.constructor === Object;\n}\nexport default function deepmerge(target, source) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    clone: true\n  };\n  const output = options.clone ? _extends({}, target) : target;\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      // Avoid prototype pollution\n      if (key === '__proto__') {\n        return;\n      }\n\n      if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n\n  return output;\n}","map":{"version":3,"names":["_extends","isPlainObject","item","constructor","Object","deepmerge","target","source","options","clone","output","keys","forEach","key"],"sources":["E:/Sites/virus-v5-web/Client/node_modules/@mui/utils/esm/deepmerge.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport function isPlainObject(item) {\n  return item !== null && typeof item === 'object' && item.constructor === Object;\n}\nexport default function deepmerge(target, source, options = {\n  clone: true\n}) {\n  const output = options.clone ? _extends({}, target) : target;\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      // Avoid prototype pollution\n      if (key === '__proto__') {\n        return;\n      }\n\n      if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n\n  return output;\n}"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAClC,OAAOA,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAP,KAAgB,QAAjC,IAA6CA,IAAI,CAACC,WAAL,KAAqBC,MAAzE;AACD;AACD,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAEZ;EAAA,IAF+CC,OAE/C,uEAFyD;IAC1DC,KAAK,EAAE;EADmD,CAEzD;EACD,MAAMC,MAAM,GAAGF,OAAO,CAACC,KAAR,GAAgBT,QAAQ,CAAC,EAAD,EAAKM,MAAL,CAAxB,GAAuCA,MAAtD;;EAEA,IAAIL,aAAa,CAACK,MAAD,CAAb,IAAyBL,aAAa,CAACM,MAAD,CAA1C,EAAoD;IAClDH,MAAM,CAACO,IAAP,CAAYJ,MAAZ,EAAoBK,OAApB,CAA4BC,GAAG,IAAI;MACjC;MACA,IAAIA,GAAG,KAAK,WAAZ,EAAyB;QACvB;MACD;;MAED,IAAIZ,aAAa,CAACM,MAAM,CAACM,GAAD,CAAP,CAAb,IAA8BA,GAAG,IAAIP,MAArC,IAA+CL,aAAa,CAACK,MAAM,CAACO,GAAD,CAAP,CAAhE,EAA+E;QAC7E;QACAH,MAAM,CAACG,GAAD,CAAN,GAAcR,SAAS,CAACC,MAAM,CAACO,GAAD,CAAP,EAAcN,MAAM,CAACM,GAAD,CAApB,EAA2BL,OAA3B,CAAvB;MACD,CAHD,MAGO;QACLE,MAAM,CAACG,GAAD,CAAN,GAAcN,MAAM,CAACM,GAAD,CAApB;MACD;IACF,CAZD;EAaD;;EAED,OAAOH,MAAP;AACD"},"metadata":{},"sourceType":"module"}