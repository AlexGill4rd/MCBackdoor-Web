{"ast":null,"code":"export const getMeridiem = (date, utils) => {\n  if (!date) {\n    return null;\n  }\n\n  return utils.getHours(date) >= 12 ? 'pm' : 'am';\n};\nexport const convertValueToMeridiem = (value, meridiem, ampm) => {\n  if (ampm) {\n    const currentMeridiem = value >= 12 ? 'pm' : 'am';\n\n    if (currentMeridiem !== meridiem) {\n      return meridiem === 'am' ? value - 12 : value + 12;\n    }\n  }\n\n  return value;\n};\nexport const convertToMeridiem = (time, meridiem, ampm, utils) => {\n  const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);\n  return utils.setHours(time, newHoursAmount);\n};\nexport const getSecondsInDay = (date, utils) => {\n  return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);\n};\nexport const createIsAfterIgnoreDatePart = function () {\n  let disableIgnoringDatePartForTimeValidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let utils = arguments.length > 1 ? arguments[1] : undefined;\n  return (dateLeft, dateRight) => {\n    if (disableIgnoringDatePartForTimeValidation) {\n      return utils.isAfter(dateLeft, dateRight);\n    }\n\n    return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);\n  };\n};","map":{"version":3,"names":["getMeridiem","date","utils","getHours","convertValueToMeridiem","value","meridiem","ampm","currentMeridiem","convertToMeridiem","time","newHoursAmount","setHours","getSecondsInDay","getMinutes","getSeconds","createIsAfterIgnoreDatePart","disableIgnoringDatePartForTimeValidation","dateLeft","dateRight","isAfter"],"sources":["E:/Sites/virus-v5-web/Client/node_modules/@mui/x-date-pickers/internals/utils/time-utils.js"],"sourcesContent":["export const getMeridiem = (date, utils) => {\n  if (!date) {\n    return null;\n  }\n\n  return utils.getHours(date) >= 12 ? 'pm' : 'am';\n};\nexport const convertValueToMeridiem = (value, meridiem, ampm) => {\n  if (ampm) {\n    const currentMeridiem = value >= 12 ? 'pm' : 'am';\n\n    if (currentMeridiem !== meridiem) {\n      return meridiem === 'am' ? value - 12 : value + 12;\n    }\n  }\n\n  return value;\n};\nexport const convertToMeridiem = (time, meridiem, ampm, utils) => {\n  const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);\n  return utils.setHours(time, newHoursAmount);\n};\nexport const getSecondsInDay = (date, utils) => {\n  return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);\n};\nexport const createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation = false, utils) => (dateLeft, dateRight) => {\n  if (disableIgnoringDatePartForTimeValidation) {\n    return utils.isAfter(dateLeft, dateRight);\n  }\n\n  return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);\n};"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;EAC1C,IAAI,CAACD,IAAL,EAAW;IACT,OAAO,IAAP;EACD;;EAED,OAAOC,KAAK,CAACC,QAAN,CAAeF,IAAf,KAAwB,EAAxB,GAA6B,IAA7B,GAAoC,IAA3C;AACD,CANM;AAOP,OAAO,MAAMG,sBAAsB,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KAA2B;EAC/D,IAAIA,IAAJ,EAAU;IACR,MAAMC,eAAe,GAAGH,KAAK,IAAI,EAAT,GAAc,IAAd,GAAqB,IAA7C;;IAEA,IAAIG,eAAe,KAAKF,QAAxB,EAAkC;MAChC,OAAOA,QAAQ,KAAK,IAAb,GAAoBD,KAAK,GAAG,EAA5B,GAAiCA,KAAK,GAAG,EAAhD;IACD;EACF;;EAED,OAAOA,KAAP;AACD,CAVM;AAWP,OAAO,MAAMI,iBAAiB,GAAG,CAACC,IAAD,EAAOJ,QAAP,EAAiBC,IAAjB,EAAuBL,KAAvB,KAAiC;EAChE,MAAMS,cAAc,GAAGP,sBAAsB,CAACF,KAAK,CAACC,QAAN,CAAeO,IAAf,CAAD,EAAuBJ,QAAvB,EAAiCC,IAAjC,CAA7C;EACA,OAAOL,KAAK,CAACU,QAAN,CAAeF,IAAf,EAAqBC,cAArB,CAAP;AACD,CAHM;AAIP,OAAO,MAAME,eAAe,GAAG,CAACZ,IAAD,EAAOC,KAAP,KAAiB;EAC9C,OAAOA,KAAK,CAACC,QAAN,CAAeF,IAAf,IAAuB,IAAvB,GAA8BC,KAAK,CAACY,UAAN,CAAiBb,IAAjB,IAAyB,EAAvD,GAA4DC,KAAK,CAACa,UAAN,CAAiBd,IAAjB,CAAnE;AACD,CAFM;AAGP,OAAO,MAAMe,2BAA2B,GAAG;EAAA,IAACC,wCAAD,uEAA4C,KAA5C;EAAA,IAAmDf,KAAnD;EAAA,OAA6D,CAACgB,QAAD,EAAWC,SAAX,KAAyB;IAC/H,IAAIF,wCAAJ,EAA8C;MAC5C,OAAOf,KAAK,CAACkB,OAAN,CAAcF,QAAd,EAAwBC,SAAxB,CAAP;IACD;;IAED,OAAON,eAAe,CAACK,QAAD,EAAWhB,KAAX,CAAf,GAAmCW,eAAe,CAACM,SAAD,EAAYjB,KAAZ,CAAzD;EACD,CAN0C;AAAA,CAApC"},"metadata":{},"sourceType":"module"}