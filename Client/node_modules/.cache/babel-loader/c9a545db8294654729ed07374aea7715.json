{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.colorCode = void 0;\n\nconst chalk = require(\"chalk\");\n\nconst COLOR_CODES = {\n  0: chalk.hex('#000000'),\n  1: chalk.hex('#0000AA'),\n  2: chalk.hex('#00AA00'),\n  3: chalk.hex('#00AAAA'),\n  4: chalk.hex('#AA0000'),\n  5: chalk.hex('#AA00AA'),\n  6: chalk.hex('#FFAA00'),\n  7: chalk.hex('#AAAAAA'),\n  8: chalk.hex('#555555'),\n  9: chalk.hex('#5555FF'),\n  a: chalk.hex('#55FF55'),\n  b: chalk.hex('#55FFFF'),\n  c: chalk.hex('#FF5555'),\n  d: chalk.hex('#FF55FF'),\n  e: chalk.hex('#FFFF55'),\n  f: chalk.hex('#FFFFFF')\n};\nconst FORMAT_CODES = {\n  l: chalk.bold,\n  m: chalk.strikethrough,\n  n: chalk.underline,\n  o: chalk.italic\n};\n\nconst colorCode = string => {\n  let segments = string.split('&');\n\n  for (let i = 1; i < segments.length; i++) {\n    let code = segments[i].substr(0, 1);\n    let previousCode = i > 1 ? segments[i - 1].substr(-1) : null;\n\n    if (COLOR_CODES[code]) {\n      segments[i] = COLOR_CODES[code](segments[i].substr(1)) + code; // Color segment and move code to back for reference\n    } else if (FORMAT_CODES[code]) {\n      segments[i] = FORMAT_CODES[code](segments[i].substr(1)) + code;\n\n      if (i > 1) {\n        if (COLOR_CODES[previousCode]) segments[i] = COLOR_CODES[previousCode](segments[i].substr(1)) + previousCode; // Move the previous code to the back cause idk\n      }\n    } else if (code === 'r') {\n      segments[i] = segments[i].substr(1) + code;\n    } else if (i === 1) {\n      segments[i] = '&' + segments[i] + 'r';\n    } else if (i > 1) {\n      segments[i] = previousCode + '&' + segments[i].substr(1);\n      i--;\n    }\n  }\n\n  for (let i = 1; i < segments.length; i++) segments[i] = segments[i].slice(0, -1);\n\n  return segments.join('');\n};\n\nexports.colorCode = colorCode;","map":{"version":3,"names":["Object","defineProperty","exports","value","colorCode","chalk","require","COLOR_CODES","hex","a","b","c","d","e","f","FORMAT_CODES","l","bold","m","strikethrough","n","underline","o","italic","string","segments","split","i","length","code","substr","previousCode","slice","join"],"sources":["E:/Sites/virusv4/Client/node_modules/minecraft-color-codes/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.colorCode = void 0;\r\nconst chalk = require(\"chalk\");\r\nconst COLOR_CODES = {\r\n    0: chalk.hex('#000000'),\r\n    1: chalk.hex('#0000AA'),\r\n    2: chalk.hex('#00AA00'),\r\n    3: chalk.hex('#00AAAA'),\r\n    4: chalk.hex('#AA0000'),\r\n    5: chalk.hex('#AA00AA'),\r\n    6: chalk.hex('#FFAA00'),\r\n    7: chalk.hex('#AAAAAA'),\r\n    8: chalk.hex('#555555'),\r\n    9: chalk.hex('#5555FF'),\r\n    a: chalk.hex('#55FF55'),\r\n    b: chalk.hex('#55FFFF'),\r\n    c: chalk.hex('#FF5555'),\r\n    d: chalk.hex('#FF55FF'),\r\n    e: chalk.hex('#FFFF55'),\r\n    f: chalk.hex('#FFFFFF')\r\n};\r\nconst FORMAT_CODES = {\r\n    l: chalk.bold,\r\n    m: chalk.strikethrough,\r\n    n: chalk.underline,\r\n    o: chalk.italic\r\n};\r\nconst colorCode = (string) => {\r\n    let segments = string.split('&');\r\n    for (let i = 1; i < segments.length; i++) {\r\n        let code = segments[i].substr(0, 1);\r\n        let previousCode = (i > 1) ? segments[i - 1].substr(-1) : null;\r\n        if (COLOR_CODES[code]) {\r\n            segments[i] = COLOR_CODES[code](segments[i].substr(1)) + code; // Color segment and move code to back for reference\r\n        }\r\n        else if (FORMAT_CODES[code]) {\r\n            segments[i] = FORMAT_CODES[code](segments[i].substr(1)) + code;\r\n            if (i > 1) {\r\n                if (COLOR_CODES[previousCode])\r\n                    segments[i] = COLOR_CODES[previousCode](segments[i].substr(1)) + previousCode; // Move the previous code to the back cause idk\r\n            }\r\n        }\r\n        else if (code === 'r') {\r\n            segments[i] = segments[i].substr(1) + code;\r\n        }\r\n        else if (i === 1) {\r\n            segments[i] = '&' + segments[i] + 'r';\r\n        }\r\n        else if (i > 1) {\r\n            segments[i] = previousCode + '&' + segments[i].substr(1);\r\n            i--;\r\n        }\r\n    }\r\n    for (let i = 1; i < segments.length; i++)\r\n        segments[i] = segments[i].slice(0, -1);\r\n    return segments.join('');\r\n};\r\nexports.colorCode = colorCode;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}