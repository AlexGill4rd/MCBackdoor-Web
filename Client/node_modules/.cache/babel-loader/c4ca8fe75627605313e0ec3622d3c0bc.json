{"ast":null,"code":"var _jsxFileName = \"E:\\\\Sites\\\\virusv4\\\\Client\\\\src\\\\pages\\\\serverpage\\\\components\\\\ServerList.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport IpAddress from '../../../IpAddress';\nimport ServerTab from './ServerTab';\nimport socketIOClient from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ip = new IpAddress();\nlet socket = socketIOClient(`http://${ip.getIP()}:3001/`);\n\nfunction ServerList() {\n  _s();\n\n  const [servers, setServers] = useState([]);\n  useEffect(function loadServers() {\n    var ip = new IpAddress();\n    fetch(`http://${ip.getIP()}:8080/servers/get`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        token: \"6969\"\n      })\n    }).then(res => res.json()).then(json => setServers(json));\n  }, []);\n  useEffect(function updateServers() {\n    socket.on(`server:update-servers`, data => {\n      console.log('test');\n      var ip = new IpAddress();\n      fetch(`http://${ip.getIP()}:8080/servers/get`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: \"6969\"\n        })\n      }).then(res => res.json()).then(json => setServers(json));\n    });\n  }, []);\n\n  if (servers.length > 0) {\n    return servers.map(server => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ServerTab, {\n        server: server\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, server.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this));\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Geen servers actief!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }, this);\n  }\n}\n\n_s(ServerList, \"s/mGAqLT+vCdn3HrR725D8HbBTg=\");\n\n_c = ServerList;\nexport default ServerList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ServerList\");","map":{"version":3,"names":["useEffect","useState","IpAddress","ServerTab","socketIOClient","ip","socket","getIP","ServerList","servers","setServers","loadServers","fetch","method","headers","body","JSON","stringify","token","then","res","json","updateServers","on","data","console","log","length","map","server","id"],"sources":["E:/Sites/virusv4/Client/src/pages/serverpage/components/ServerList.tsx"],"sourcesContent":["import { Key, useEffect, useState } from 'react';\r\nimport IpAddress from '../../../IpAddress';\r\nimport ServerTab from './ServerTab';\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { stringify } from 'querystring';\r\nvar ip = new IpAddress();\r\nlet socket = socketIOClient(`http://${ip.getIP()}:3001/`)\r\n\r\nfunction ServerList(){\r\n    const [servers, setServers] = useState<any>([]);\r\n\r\n    useEffect(function loadServers(){\r\n        var ip = new IpAddress();\r\n        fetch(`http://${ip.getIP()}:8080/servers/get`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({token: \"6969\"})\r\n        }).then(res => res.json())\r\n        .then(json => setServers(json));\r\n    }, []);\r\n    useEffect(function updateServers(){\r\n        socket.on(`server:update-servers`, data => {\r\n            console.log('test')\r\n            var ip = new IpAddress();\r\n            fetch(`http://${ip.getIP()}:8080/servers/get`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({token: \"6969\"})\r\n            }).then(res => res.json())\r\n            .then(json => setServers(json));\r\n        })\r\n    }, []);\r\n    if (servers.length > 0){\r\n        return (\r\n            servers.map((server: {id: number}) => \r\n            <div key={server.id}>{\r\n                <ServerTab server={server}/>\r\n            }</div>)\r\n        );\r\n    }else{\r\n        return <div>Geen servers actief!</div>\r\n    }\r\n}\r\nexport default ServerList;"],"mappings":";;;AAAA,SAAcA,SAAd,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,IAAIC,EAAE,GAAG,IAAIH,SAAJ,EAAT;AACA,IAAII,MAAM,GAAGF,cAAc,CAAE,UAASC,EAAE,CAACE,KAAH,EAAW,QAAtB,CAA3B;;AAEA,SAASC,UAAT,GAAqB;EAAA;;EACjB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAM,EAAN,CAAtC;EAEAD,SAAS,CAAC,SAASW,WAAT,GAAsB;IAC5B,IAAIN,EAAE,GAAG,IAAIH,SAAJ,EAAT;IACAU,KAAK,CAAE,UAASP,EAAE,CAACE,KAAH,EAAW,mBAAtB,EAA0C;MAC3CM,MAAM,EAAE,MADmC;MAE3CC,OAAO,EAAE;QAAE,gBAAgB;MAAlB,CAFkC;MAG3CC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAACC,KAAK,EAAE;MAAR,CAAf;IAHqC,CAA1C,CAAL,CAIGC,IAJH,CAIQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJf,EAKCF,IALD,CAKME,IAAI,IAAIX,UAAU,CAACW,IAAD,CALxB;EAMH,CARQ,EAQN,EARM,CAAT;EASArB,SAAS,CAAC,SAASsB,aAAT,GAAwB;IAC9BhB,MAAM,CAACiB,EAAP,CAAW,uBAAX,EAAmCC,IAAI,IAAI;MACvCC,OAAO,CAACC,GAAR,CAAY,MAAZ;MACA,IAAIrB,EAAE,GAAG,IAAIH,SAAJ,EAAT;MACAU,KAAK,CAAE,UAASP,EAAE,CAACE,KAAH,EAAW,mBAAtB,EAA0C;QAC3CM,MAAM,EAAE,MADmC;QAE3CC,OAAO,EAAE;UAAE,gBAAgB;QAAlB,CAFkC;QAG3CC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UAACC,KAAK,EAAE;QAAR,CAAf;MAHqC,CAA1C,CAAL,CAIGC,IAJH,CAIQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJf,EAKCF,IALD,CAKME,IAAI,IAAIX,UAAU,CAACW,IAAD,CALxB;IAMH,CATD;EAUH,CAXQ,EAWN,EAXM,CAAT;;EAYA,IAAIZ,OAAO,CAACkB,MAAR,GAAiB,CAArB,EAAuB;IACnB,OACIlB,OAAO,CAACmB,GAAR,CAAaC,MAAD,iBACZ;MAAA,uBACI,QAAC,SAAD;QAAW,MAAM,EAAEA;MAAnB;QAAA;QAAA;QAAA;MAAA;IADJ,GAAUA,MAAM,CAACC,EAAjB;MAAA;MAAA;MAAA;IAAA,QADA,CADJ;EAMH,CAPD,MAOK;IACD,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACH;AACJ;;GAlCQtB,U;;KAAAA,U;AAmCT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}