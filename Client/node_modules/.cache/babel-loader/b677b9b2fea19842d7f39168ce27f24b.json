{"ast":null,"code":"// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nlet hadKeyboardEvent = true;\nlet hadFocusVisibleRecently = false;\nlet hadFocusVisibleRecentlyTimeout;\nconst inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @returns {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  const {\n    type,\n    tagName\n  } = node;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  const {\n    target\n  } = event;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {// Browsers not implementing :focus-visible will throw a SyntaxError.\n    // We use our own heuristic for those browsers.\n    // Rethrow might be better if it's not the expected error but do we really\n    // want to crash if focus-visible malfunctioned?\n  } // No need for validFocusTarget check. The user does that by attaching it to\n  // focusable events only.\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n\nexport default function useIsFocusVisible() {\n  const ref = React.useCallback(node => {\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n  const isFocusVisibleRef = React.useRef(false);\n  /**\n   * Should be called if a blur event is fired\n   */\n\n  function handleBlurVisible() {\n    // checking against potential state variable does not suffice if we focus and blur synchronously.\n    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.\n    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.\n    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751\n    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).\n    if (isFocusVisibleRef.current) {\n      // To detect a tab/window switch, we look for a blur event followed\n      // rapidly by a visibility change.\n      // If we don't see a visibility change within 100ms, it's probably a\n      // regular focus change.\n      hadFocusVisibleRecently = true;\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {\n        hadFocusVisibleRecently = false;\n      }, 100);\n      isFocusVisibleRef.current = false;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Should be called if a blur event is fired\n   */\n\n\n  function handleFocusVisible(event) {\n    if (isFocusVisible(event)) {\n      isFocusVisibleRef.current = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  return {\n    isFocusVisibleRef,\n    onFocus: handleFocusVisible,\n    onBlur: handleBlurVisible,\n    ref\n  };\n}","map":{"version":3,"names":["React","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","focusTriggersKeyboardModality","node","type","tagName","readOnly","isContentEditable","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","visibilityState","prepare","doc","addEventListener","teardown","removeEventListener","isFocusVisible","target","matches","error","useIsFocusVisible","ref","useCallback","ownerDocument","isFocusVisibleRef","useRef","handleBlurVisible","current","window","clearTimeout","setTimeout","handleFocusVisible","onFocus","onBlur"],"sources":["E:/Sites/virus-v5-web/Client/node_modules/@mui/utils/esm/useIsFocusVisible.js"],"sourcesContent":["// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nlet hadKeyboardEvent = true;\nlet hadFocusVisibleRecently = false;\nlet hadFocusVisibleRecentlyTimeout;\nconst inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @returns {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  const {\n    type,\n    tagName\n  } = node;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  const {\n    target\n  } = event;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {// Browsers not implementing :focus-visible will throw a SyntaxError.\n    // We use our own heuristic for those browsers.\n    // Rethrow might be better if it's not the expected error but do we really\n    // want to crash if focus-visible malfunctioned?\n  } // No need for validFocusTarget check. The user does that by attaching it to\n  // focusable events only.\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n\nexport default function useIsFocusVisible() {\n  const ref = React.useCallback(node => {\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n  const isFocusVisibleRef = React.useRef(false);\n  /**\n   * Should be called if a blur event is fired\n   */\n\n  function handleBlurVisible() {\n    // checking against potential state variable does not suffice if we focus and blur synchronously.\n    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.\n    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.\n    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751\n    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).\n    if (isFocusVisibleRef.current) {\n      // To detect a tab/window switch, we look for a blur event followed\n      // rapidly by a visibility change.\n      // If we don't see a visibility change within 100ms, it's probably a\n      // regular focus change.\n      hadFocusVisibleRecently = true;\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {\n        hadFocusVisibleRecently = false;\n      }, 100);\n      isFocusVisibleRef.current = false;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Should be called if a blur event is fired\n   */\n\n\n  function handleFocusVisible(event) {\n    if (isFocusVisible(event)) {\n      isFocusVisibleRef.current = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  return {\n    isFocusVisibleRef,\n    onFocus: handleFocusVisible,\n    onBlur: handleBlurVisible,\n    ref\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}