{"ast":null,"code":"var _jsxFileName = \"E:\\\\Sites\\\\virusv4\\\\Client\\\\src\\\\pages\\\\servercontrollers\\\\loggingcontroller\\\\LogginControllerPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { socket } from \"../../../socket/socket\";\nimport './LogginControllerPageStyle.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LogginControllerPage() {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const {\n    serverid\n  } = useParams();\n  const [server, setServer] = useState([]);\n  const divRef = useRef(null);\n  useEffect(function loadServer() {\n    socket.emit(\"client:mcserver-get\", serverid);\n  }, []);\n  useEffect(function updateServer() {\n    socket.on(`server:mcserver-get`, data => {\n      setServer(JSON.parse(data.JsonData));\n      socket.emit(\"client:get-server-logs\", data.Name);\n    });\n  }, []);\n  useEffect(function updateLogs() {\n    socket.on(\"server:update-logging\", data => {\n      if (data.Servername === server.Address) {\n        setMessages(data);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    var _divRef$current;\n\n    (_divRef$current = divRef.current) === null || _divRef$current === void 0 ? void 0 : _divRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logging-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logging-panel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logging-panel-message-container\",\n        ref: divRef,\n        children: messages.map((message, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"logging-panel-message-container-message\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"logging-panel-message-container-message-date\",\n                children: message.Date + \" - \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"logging-panel-message-container-message\",\n                children: message.Message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 25\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LogginControllerPage, \"JMQlTWEY5RCv5Xr718wwLwkWgEA=\", false, function () {\n  return [useParams];\n});\n\n_c = LogginControllerPage;\nexport default LogginControllerPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogginControllerPage\");","map":{"version":3,"names":["useEffect","useRef","useState","useParams","socket","LogginControllerPage","messages","setMessages","serverid","server","setServer","divRef","loadServer","emit","updateServer","on","data","JSON","parse","JsonData","Name","updateLogs","Servername","Address","current","scrollIntoView","behavior","map","message","index","Date","Message"],"sources":["E:/Sites/virusv4/Client/src/pages/servercontrollers/loggingcontroller/LogginControllerPage.tsx"],"sourcesContent":["import { JSXElementConstructor, ReactElement, ReactFragment, ReactPortal, useEffect, useRef, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { socket } from \"../../../socket/socket\";\r\n\r\nimport './LogginControllerPageStyle.scss'\r\n\r\nfunction LogginControllerPage(){\r\n    const [messages, setMessages] = useState<any>([]);\r\n    const { serverid } = useParams();\r\n    const [server, setServer] = useState<any>([]);\r\n\r\n    const divRef = useRef<null | HTMLDivElement>(null);\r\n\r\n    useEffect(function loadServer(){\r\n        socket.emit(\"client:mcserver-get\", serverid)\r\n    }, []);\r\n    useEffect(function updateServer(){\r\n        socket.on(`server:mcserver-get`, data => {\r\n            setServer(JSON.parse(data.JsonData))\r\n            socket.emit(\"client:get-server-logs\", data.Name)\r\n        })\r\n    }, []);\r\n    useEffect(function updateLogs(){\r\n        socket.on(\"server:update-logging\", data => {\r\n            if (data.Servername === server.Address){\r\n                setMessages(data);\r\n            }\r\n        })\r\n    }, []);\r\n    useEffect(() => {\r\n        divRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }, [messages]);\r\n    return (\r\n        <div className=\"logging-container\">\r\n            <div className=\"logging-panel\">\r\n                <div className=\"logging-panel-message-container\" ref={divRef}>\r\n                    {messages.map((message: { Date: string; Message: string; }, index: number) => {\r\n                        return (<div key={index}>\r\n                        <div className=\"logging-panel-message-container-message\">\r\n                            <span className=\"logging-panel-message-container-message-date\">\r\n                                {message.Date + \" - \"}\r\n                            </span>\r\n                            <span className=\"logging-panel-message-container-message\">\r\n                                {message.Message}\r\n                            </span>\r\n                            </div>\r\n                        </div>\r\n                            \r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default LogginControllerPage;"],"mappings":";;;AAAA,SAA0EA,SAA1E,EAAqFC,MAArF,EAA6FC,QAA7F,QAA6G,OAA7G;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,wBAAvB;AAEA,OAAO,kCAAP;;;AAEA,SAASC,oBAAT,GAA+B;EAAA;;EAC3B,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAM,EAAN,CAAxC;EACA,MAAM;IAAEM;EAAF,IAAeL,SAAS,EAA9B;EACA,MAAM,CAACM,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAM,EAAN,CAApC;EAEA,MAAMS,MAAM,GAAGV,MAAM,CAAwB,IAAxB,CAArB;EAEAD,SAAS,CAAC,SAASY,UAAT,GAAqB;IAC3BR,MAAM,CAACS,IAAP,CAAY,qBAAZ,EAAmCL,QAAnC;EACH,CAFQ,EAEN,EAFM,CAAT;EAGAR,SAAS,CAAC,SAASc,YAAT,GAAuB;IAC7BV,MAAM,CAACW,EAAP,CAAW,qBAAX,EAAiCC,IAAI,IAAI;MACrCN,SAAS,CAACO,IAAI,CAACC,KAAL,CAAWF,IAAI,CAACG,QAAhB,CAAD,CAAT;MACAf,MAAM,CAACS,IAAP,CAAY,wBAAZ,EAAsCG,IAAI,CAACI,IAA3C;IACH,CAHD;EAIH,CALQ,EAKN,EALM,CAAT;EAMApB,SAAS,CAAC,SAASqB,UAAT,GAAqB;IAC3BjB,MAAM,CAACW,EAAP,CAAU,uBAAV,EAAmCC,IAAI,IAAI;MACvC,IAAIA,IAAI,CAACM,UAAL,KAAoBb,MAAM,CAACc,OAA/B,EAAuC;QACnChB,WAAW,CAACS,IAAD,CAAX;MACH;IACJ,CAJD;EAKH,CANQ,EAMN,EANM,CAAT;EAOAhB,SAAS,CAAC,MAAM;IAAA;;IACZ,mBAAAW,MAAM,CAACa,OAAP,oEAAgBC,cAAhB,CAA+B;MAAEC,QAAQ,EAAE;IAAZ,CAA/B;EACH,CAFQ,EAEN,CAACpB,QAAD,CAFM,CAAT;EAGA,oBACI;IAAK,SAAS,EAAC,mBAAf;IAAA,uBACI;MAAK,SAAS,EAAC,eAAf;MAAA,uBACI;QAAK,SAAS,EAAC,iCAAf;QAAiD,GAAG,EAAEK,MAAtD;QAAA,UACKL,QAAQ,CAACqB,GAAT,CAAa,CAACC,OAAD,EAA8CC,KAA9C,KAAgE;UAC1E,oBAAQ;YAAA,uBACR;cAAK,SAAS,EAAC,yCAAf;cAAA,wBACI;gBAAM,SAAS,EAAC,8CAAhB;gBAAA,UACKD,OAAO,CAACE,IAAR,GAAe;cADpB;gBAAA;gBAAA;gBAAA;cAAA,QADJ,eAII;gBAAM,SAAS,EAAC,yCAAhB;gBAAA,UACKF,OAAO,CAACG;cADb;gBAAA;gBAAA;gBAAA;cAAA,QAJJ;YAAA;cAAA;cAAA;cAAA;YAAA;UADQ,GAAUF,KAAV;YAAA;YAAA;YAAA;UAAA,QAAR;QAYH,CAbA;MADL;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAsBH;;GAhDQxB,oB;UAEgBF,S;;;KAFhBE,oB;AAiDT,eAAeA,oBAAf"},"metadata":{},"sourceType":"module"}