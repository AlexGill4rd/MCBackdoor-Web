{"ast":null,"code":"export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty(_ref) {\n  let {\n    size,\n    grid\n  } = _ref;\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid(_ref2) {\n  let {\n    lineHeight,\n    pixels,\n    htmlFontSize\n  } = _ref2;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty(_ref3) {\n  let {\n    cssProperty,\n    min,\n    max,\n    unit = 'rem',\n    breakpoints = [600, 900, 1200],\n    transform = null\n  } = _ref3;\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","map":{"version":3,"names":["isUnitless","value","String","parseFloat","length","getUnit","input","match","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","alignProperty","size","grid","sizeBelow","sizeAbove","fontGrid","lineHeight","pixels","htmlFontSize","responsiveProperty","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round"],"sources":["E:/Sites/virusv4/Client/node_modules/@mui/material/styles/cssUtils.js"],"sourcesContent":["export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA2B;EAChC,OAAOC,MAAM,CAACC,UAAU,CAACF,KAAD,CAAX,CAAN,CAA0BG,MAA1B,KAAqCF,MAAM,CAACD,KAAD,CAAN,CAAcG,MAA1D;AACD,C,CAAC;AACF;AACA;;AAEA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;EAC7B,OAAOJ,MAAM,CAACI,KAAD,CAAN,CAAcC,KAAd,CAAoB,kBAApB,EAAwC,CAAxC,KAA8C,EAArD;AACD,C,CAAC;;AAEF,OAAO,SAASC,UAAT,CAAoBJ,MAApB,EAA4B;EACjC,OAAOD,UAAU,CAACC,MAAD,CAAjB;AACD,C,CAAC;AACF;;AAEA,OAAO,SAASK,aAAT,CAAuBC,YAAvB,EAAqC;EAC1C,OAAO,CAACN,MAAD,EAASO,MAAT,KAAoB;IACzB,MAAMC,QAAQ,GAAGP,OAAO,CAACD,MAAD,CAAxB,CADyB,CACS;;IAElC,IAAIQ,QAAQ,KAAKD,MAAjB,EAAyB;MACvB,OAAOP,MAAP;IACD,CALwB,CAKvB;;;IAGF,IAAIS,QAAQ,GAAGL,UAAU,CAACJ,MAAD,CAAzB;;IAEA,IAAIQ,QAAQ,KAAK,IAAjB,EAAuB;MACrB,IAAIA,QAAQ,KAAK,IAAjB,EAAuB;QACrBC,QAAQ,GAAGL,UAAU,CAACJ,MAAD,CAAV,GAAqBI,UAAU,CAACE,YAAD,CAA1C;MACD,CAFD,MAEO,IAAIE,QAAQ,KAAK,KAAjB,EAAwB;QAC7BC,QAAQ,GAAGL,UAAU,CAACJ,MAAD,CAAV,GAAqBI,UAAU,CAACE,YAAD,CAA1C;MACD;IACF,CAhBwB,CAgBvB;;;IAGF,IAAII,YAAY,GAAGD,QAAnB;;IAEA,IAAIF,MAAM,KAAK,IAAf,EAAqB;MACnB,IAAIA,MAAM,KAAK,IAAf,EAAqB;QACnBG,YAAY,GAAGD,QAAQ,GAAGL,UAAU,CAACE,YAAD,CAApC;MACD,CAFD,MAEO,IAAIC,MAAM,KAAK,KAAf,EAAsB;QAC3BG,YAAY,GAAGD,QAAQ,GAAGL,UAAU,CAACE,YAAD,CAApC;MACD,CAFM,MAEA;QACL,OAAON,MAAP;MACD;IACF;;IAED,OAAOD,UAAU,CAACW,YAAY,CAACC,OAAb,CAAqB,CAArB,CAAD,CAAV,GAAsCJ,MAA7C;EACD,CAhCD;AAiCD;AACD,OAAO,SAASK,aAAT,OAGJ;EAAA,IAH2B;IAC5BC,IAD4B;IAE5BC;EAF4B,CAG3B;EACD,MAAMC,SAAS,GAAGF,IAAI,GAAGA,IAAI,GAAGC,IAAhC;EACA,MAAME,SAAS,GAAGD,SAAS,GAAGD,IAA9B;EACA,OAAOD,IAAI,GAAGE,SAAP,GAAmBC,SAAS,GAAGH,IAA/B,GAAsCE,SAAtC,GAAkDC,SAAzD;AACD,C,CAAC;AACF;AACA;;AAEA,OAAO,SAASC,QAAT,QAIJ;EAAA,IAJsB;IACvBC,UADuB;IAEvBC,MAFuB;IAGvBC;EAHuB,CAItB;EACD,OAAOD,MAAM,IAAID,UAAU,GAAGE,YAAjB,CAAb;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAT,QAOJ;EAAA,IAPgC;IACjCC,WADiC;IAEjCC,GAFiC;IAGjCC,GAHiC;IAIjCC,IAAI,GAAG,KAJ0B;IAKjCC,WAAW,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,CALmB;IAMjCC,SAAS,GAAG;EANqB,CAOhC;EACD,MAAMC,MAAM,GAAG;IACb,CAACN,WAAD,GAAgB,GAAEC,GAAI,GAAEE,IAAK;EADhB,CAAf;EAGA,MAAMI,MAAM,GAAG,CAACL,GAAG,GAAGD,GAAP,IAAcG,WAAW,CAACA,WAAW,CAAC1B,MAAZ,GAAqB,CAAtB,CAAxC;EACA0B,WAAW,CAACI,OAAZ,CAAoBC,UAAU,IAAI;IAChC,IAAIlC,KAAK,GAAG0B,GAAG,GAAGM,MAAM,GAAGE,UAA3B;;IAEA,IAAIJ,SAAS,KAAK,IAAlB,EAAwB;MACtB9B,KAAK,GAAG8B,SAAS,CAAC9B,KAAD,CAAjB;IACD;;IAED+B,MAAM,CAAE,qBAAoBG,UAAW,KAAjC,CAAN,GAA+C;MAC7C,CAACT,WAAD,GAAgB,GAAEU,IAAI,CAACC,KAAL,CAAWpC,KAAK,GAAG,KAAnB,IAA4B,KAAM,GAAE4B,IAAK;IADd,CAA/C;EAGD,CAVD;EAWA,OAAOG,MAAP;AACD"},"metadata":{},"sourceType":"module"}