{"ast":null,"code":"import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef, unstable_setRef as setRef } from '@mui/utils';\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\n\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  const handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return () => {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;","map":{"version":3,"names":["React","ReactDOM","PropTypes","exactProp","HTMLElementType","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useForkRef","useForkRef","unstable_setRef","setRef","getContainer","container","Portal","forwardRef","props","ref","children","disablePortal","mountNode","setMountNode","useState","handleRef","isValidElement","document","body","undefined","cloneElement","createPortal","process","env","NODE_ENV","propTypes","node","oneOfType","func","bool"],"sources":["E:/Sites/virusv4/CLient/node_modules/@mui/base/Portal/Portal.js"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef, unstable_setRef as setRef } from '@mui/utils';\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\n\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  const handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return () => {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,0BAA0B,IAAIC,iBAAnE,EAAsFC,mBAAmB,IAAIC,UAA7G,EAAyHC,eAAe,IAAIC,MAA5I,QAA0J,YAA1J;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;EAC/B,OAAO,OAAOA,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SAAvD;AACD;AACD;AACA;AACA;AACA;;;AAGA,MAAMC,MAAM,GAAG,aAAab,KAAK,CAACc,UAAN,CAAiB,SAASD,MAAT,CAAgBE,KAAhB,EAAuBC,GAAvB,EAA4B;EACvE,MAAM;IACJC,QADI;IAEJL,SAFI;IAGJM,aAAa,GAAG;EAHZ,IAIFH,KAJJ;EAKA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BpB,KAAK,CAACqB,QAAN,CAAe,IAAf,CAAlC;EACA,MAAMC,SAAS,GAAGd,UAAU,EAAE,aAAaR,KAAK,CAACuB,cAAN,CAAqBN,QAArB,IAAiCA,QAAQ,CAACD,GAA1C,GAAgD,IAA/D,EAAqEA,GAArE,CAA5B;EACAV,iBAAiB,CAAC,MAAM;IACtB,IAAI,CAACY,aAAL,EAAoB;MAClBE,YAAY,CAACT,YAAY,CAACC,SAAD,CAAZ,IAA2BY,QAAQ,CAACC,IAArC,CAAZ;IACD;EACF,CAJgB,EAId,CAACb,SAAD,EAAYM,aAAZ,CAJc,CAAjB;EAKAZ,iBAAiB,CAAC,MAAM;IACtB,IAAIa,SAAS,IAAI,CAACD,aAAlB,EAAiC;MAC/BR,MAAM,CAACM,GAAD,EAAMG,SAAN,CAAN;MACA,OAAO,MAAM;QACXT,MAAM,CAACM,GAAD,EAAM,IAAN,CAAN;MACD,CAFD;IAGD;;IAED,OAAOU,SAAP;EACD,CATgB,EASd,CAACV,GAAD,EAAMG,SAAN,EAAiBD,aAAjB,CATc,CAAjB;;EAWA,IAAIA,aAAJ,EAAmB;IACjB,KAAK,aAAalB,KAAK,CAACuB,cAAN,CAAqBN,QAArB,CAAlB,EAAkD;MAChD,OAAO,aAAajB,KAAK,CAAC2B,YAAN,CAAmBV,QAAnB,EAA6B;QAC/CD,GAAG,EAAEM;MAD0C,CAA7B,CAApB;IAGD;;IAED,OAAOL,QAAP;EACD;;EAED,OAAOE,SAAS,GAAG,aAAalB,QAAQ,CAAC2B,YAAT,CAAsBX,QAAtB,EAAgCE,SAAhC,CAAhB,GAA6DA,SAA7E;AACD,CAnC2B,CAA5B;AAoCAU,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClB,MAAM,CAACmB;AAC/C;AADwC,EAEtC;EACA;EACA;EACA;EACA;;EAEA;AACF;AACA;EACEf,QAAQ,EAAEf,SAAS,CAAC+B,IATpB;;EAWA;AACF;AACA;AACA;AACA;AACA;AACA;EACErB,SAAS,EAAEV;EACX;EADoB,CAEnBgC,SAFU,CAEA,CAAC9B,eAAD,EAAkBF,SAAS,CAACiC,IAA5B,CAFA,CAlBX;;EAsBA;AACF;AACA;AACA;EACEjB,aAAa,EAAEhB,SAAS,CAACkC;AA1BzB,CAFF,GA6BI,KAAK,CA7BT;;AA+BA,IAAIP,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzC;EACAlB,MAAM,CAAC,cAAc,EAAf,CAAN,GAA2BV,SAAS,CAACU,MAAM,CAACmB,SAAR,CAApC;AACD;;AAED,eAAenB,MAAf"},"metadata":{},"sourceType":"module"}