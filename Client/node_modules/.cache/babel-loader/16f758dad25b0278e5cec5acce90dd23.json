{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPlayerHeadByName = exports.getPlayerHead = exports.getSkinURLByName = exports.getSkinURL = exports.getSkinDataByName = exports.getSkinData = exports.getProfileByName = exports.getProfile = exports.getUUIDs = exports.getNameHistoryByName = exports.getNameHistory = exports.getUUID = exports.getServiceStatus = void 0;\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar canvas_1 = __importDefault(require(\"canvas\"));\n\nvar Clipper = require('image-clipper');\n\nvar clipper = Clipper({\n  canvas: canvas_1.default\n});\nvar MojangApi = axios_1.default.create({\n  baseURL: \"https://api.mojang.com/\",\n  timeout: 1000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\nfunction _get(url) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , axios_1.default.get(url)];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent().data];\n      }\n    });\n  });\n}\n\nfunction _mojangApiGet(url) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , MojangApi.get(url)];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent().data];\n      }\n    });\n  });\n}\n\nfunction __mojangApiPost(url, body) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , MojangApi.post(url, body)];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent().data];\n      }\n    });\n  });\n}\n/**\r\n * Gets the current service status of various Mojang services\r\n * @returns {Object} - An Object that contains the status of various Mojang services\r\n */\n\n\nfunction getServiceStatus() {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , _get(\"https://status.mojang.com/check\")];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getServiceStatus = getServiceStatus;\n/**\r\n * Gets the UUID of a player\r\n * @param {string} username - The username of the player\r\n * @returns {Object} - This will return the UUID of the name that is provided\r\n */\n\nfunction getUUID(username) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , _mojangApiGet(\"/users/profiles/minecraft/\" + username)];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getUUID = getUUID;\n/**\r\n * Gets the name history of a player\r\n * @param {string} uuid -  The UUID from the player\r\n * @returns {Object} - This will return all the usernames this user used in the past and the one they are using currently.\r\n */\n\nfunction getNameHistory(uuid) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , _mojangApiGet(\"/user/profiles/\" + uuid + \"/names\")];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getNameHistory = getNameHistory;\n/**\r\n * Gets the name history of a player\r\n * @param {string} username - The username of the player\r\n * @returns {Object} - This will return all the usernames this user used in the past and the one they are using currently.\r\n */\n\nfunction getNameHistoryByName(username) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getUUID(username).then(function (data) {\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , getNameHistory(data.id)];\n\n                  case 1:\n                    return [2\n                    /*return*/\n                    , _a.sent()];\n                }\n              });\n            });\n          })];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getNameHistoryByName = getNameHistoryByName;\n/**\r\n * Gets the UUIDs for multiple players\r\n * @param {Array.<string>} names - An array with player names\r\n * @returns {Object} - This will return the UUID's and names of the players that are provided\r\n */\n\nfunction getUUIDs(names) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , __mojangApiPost(\"/profiles/minecraft\", names)];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getUUIDs = getUUIDs;\n/**\r\n * Gets the profile of a player\r\n * @param {string} uuid -  The UUID from the player\r\n * @returns {Object} - This will return the player's username and other additional information (e.g. skins)\r\n */\n\nfunction getProfile(uuid) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , _get(\"https://sessionserver.mojang.com/session/minecraft/profile/\" + uuid)];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getProfile = getProfile;\n/**\r\n * Gets the profile of a player\r\n * @param {string} username - The username of the player\r\n * @returns {Object} - This will return the player's username and other additional information (e.g. skins)\r\n */\n\nfunction getProfileByName(username) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getUUID(username).then(function (data) {\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , getProfile(data.id)];\n\n                  case 1:\n                    return [2\n                    /*return*/\n                    , _a.sent()];\n                }\n              });\n            });\n          })];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getProfileByName = getProfileByName;\n/**\r\n * Gets the skin data of a player\r\n * @param {string} uuid -  The UUID from the player\r\n * @returns {Object} - This will return the player's skin information (e.g. skin url)\r\n */\n\nfunction getSkinData(uuid) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getProfile(uuid).then(function (data) {\n            return JSON.parse(Buffer.from(data.properties[0].value, 'base64').toString('ascii'));\n          })];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getSkinData = getSkinData;\n/**\r\n * Gets the skin data of a player\r\n * @param {string} username - The username of the player\r\n * @returns {Object} - This will return the player's skin information (e.g. skin URL)\r\n */\n\nfunction getSkinDataByName(username) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getProfileByName(username).then(function (data) {\n            return JSON.parse(Buffer.from(data.properties[0].value, 'base64').toString('ascii'));\n          })];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getSkinDataByName = getSkinDataByName;\n/**\r\n * Gets the skin URL of a player\r\n * @param {string} uuid -  The UUID from the player\r\n * @returns {string} - This will return the URL of the player skin\r\n */\n\nfunction getSkinURL(uuid) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getSkinData(uuid).then(function (data) {\n            return data.textures.SKIN.url;\n          })];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getSkinURL = getSkinURL;\n/**\r\n * Gets the skin URL of a player\r\n * @param {string} username - The username of the player\r\n * @returns {string} - This will return the URL of the player skin\r\n */\n\nfunction getSkinURLByName(username) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getSkinDataByName(username).then(function (data) {\n            return data.textures.SKIN.url;\n          })];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getSkinURLByName = getSkinURLByName;\n\nfunction getCroppedImage(skinURL, x, y, w, h) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , new Promise(function (resolve) {\n        clipper.loadImageFromUrl(skinURL, function () {\n          clipper.crop(x, y, w, h).toDataURL(function (dataURL) {\n            resolve(dataURL);\n          });\n        });\n      })];\n    });\n  });\n}\n/**\r\n * Gets the player head image of a player\r\n * @param {string} uuid -  The UUID from the player\r\n * @returns {string} - This will return a base64 string of the player head image (8x8)\r\n */\n\n\nfunction getPlayerHead(uuid) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getSkinURL(uuid).then(function (url) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var layer1, layer2;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , getCroppedImage(url, 8, 8, 8, 8).then(function (head) {\n                      return head;\n                    })];\n\n                  case 1:\n                    layer1 = _a.sent();\n                    return [4\n                    /*yield*/\n                    , getCroppedImage(url, 40, 8, 8, 8).then(function (head) {\n                      return head;\n                    })];\n\n                  case 2:\n                    layer2 = _a.sent();\n                    return [2\n                    /*return*/\n                    , [layer1, layer2]];\n                }\n              });\n            });\n          }).then(function (layers) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var cnv, ctx;\n              return __generator(this, function (_a) {\n                cnv = canvas_1.default.createCanvas(8, 8);\n                ctx = cnv.getContext(\"2d\");\n                ctx.imageSmoothingEnabled = false;\n                ctx.fillRect(0, 0, 8, 8);\n                canvas_1.default.loadImage(layers[0]).then(function (image) {\n                  ctx.drawImage(image, 0, 0);\n                  canvas_1.default.loadImage(layers[1]).then(function (image) {\n                    ctx.drawImage(image, 0, 0);\n                  });\n                });\n                return [2\n                /*return*/\n                , cnv];\n              });\n            });\n          }).then(function (canvas) {\n            return canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n          })];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getPlayerHead = getPlayerHead;\n/**\r\n * Gets the player head image of a player\r\n * @param {string} username - The username of the player\r\n * @returns {string} - This will return a base64 string of the player head image (8x8)\r\n */\n\nfunction getPlayerHeadByName(username) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getSkinURLByName(username).then(function (url) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var layer1, layer2;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , getCroppedImage(url, 8, 8, 8, 8).then(function (head) {\n                      return head;\n                    })];\n\n                  case 1:\n                    layer1 = _a.sent();\n                    return [4\n                    /*yield*/\n                    , getCroppedImage(url, 40, 8, 8, 8).then(function (head) {\n                      return head;\n                    })];\n\n                  case 2:\n                    layer2 = _a.sent();\n                    return [2\n                    /*return*/\n                    , [layer1, layer2]];\n                }\n              });\n            });\n          }).then(function (layers) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var cnv, ctx;\n              return __generator(this, function (_a) {\n                cnv = canvas_1.default.createCanvas(8, 8);\n                ctx = cnv.getContext(\"2d\");\n                ctx.imageSmoothingEnabled = false;\n                ctx.fillRect(0, 0, 8, 8);\n                canvas_1.default.loadImage(layers[0]).then(function (image) {\n                  ctx.drawImage(image, 0, 0);\n                  canvas_1.default.loadImage(layers[1]).then(function (image) {\n                    ctx.drawImage(image, 0, 0);\n                  });\n                });\n                return [2\n                /*return*/\n                , cnv];\n              });\n            });\n          }).then(function (canvas) {\n            return canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n          })];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nexports.getPlayerHeadByName = getPlayerHeadByName;","map":{"version":3,"mappings":"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","names":["Clipper","require","clipper","canvas","canvas_1","MojangApi","axios_1","create","baseURL","timeout","headers","_get","url","get","_a","data","_mojangApiGet","__mojangApiPost","body","post","getServiceStatus","exports","getUUID","username","getNameHistory","uuid","getNameHistoryByName","then","id","getUUIDs","names","getProfile","getProfileByName","getSkinData","JSON","parse","Buffer","from","properties","value","toString","getSkinDataByName","getSkinURL","textures","SKIN","getSkinURLByName","getCroppedImage","skinURL","x","y","w","h","Promise","loadImageFromUrl","crop","toDataURL","dataURL","resolve","getPlayerHead","head","layer1","layer2","layers","cnv","createCanvas","ctx","getContext","imageSmoothingEnabled","fillRect","loadImage","drawImage","image","replace","getPlayerHeadByName"],"sources":["E:\\Sites\\virusv4\\Client\\node_modules\\mojang-minecraft-api\\src\\index.ts"],"sourcesContent":["import axios from \"axios\"\r\nimport canvas from \"canvas\"\r\n\r\nconst Clipper = require('image-clipper');\r\nvar clipper = Clipper({\r\n    canvas: canvas\r\n})\r\n\r\nconst MojangApi = axios.create({\r\n    baseURL: \"https://api.mojang.com/\",\r\n    timeout: 1000,\r\n    headers: {\r\n        \"Content-Type\":\"application/json\"\r\n    }\r\n})\r\n\r\nasync function _get(url: string) {\r\n    return (await axios.get(url)).data\r\n}\r\n\r\nasync function _mojangApiGet(url: string) {\r\n    return (await MojangApi.get(url)).data\r\n}\r\n\r\nasync function __mojangApiPost(url: string, body: Array<string>) {\r\n    return (await MojangApi.post(url, body)).data\r\n}\r\n\r\n/**\r\n * Gets the current service status of various Mojang services\r\n * @returns {Object} - An Object that contains the status of various Mojang services\r\n */\r\nexport async function getServiceStatus() {\r\n    return await _get(\"https://status.mojang.com/check\")\r\n}\r\n\r\n/**\r\n * Gets the UUID of a player\r\n * @param {string} username - The username of the player\r\n * @returns {Object} - This will return the UUID of the name that is provided\r\n */\r\nexport async function getUUID(username: string) {\r\n    return await _mojangApiGet(`/users/profiles/minecraft/${username}`)\r\n}\r\n\r\n/**\r\n * Gets the name history of a player\r\n * @param {string} uuid -  The UUID from the player\r\n * @returns {Object} - This will return all the usernames this user used in the past and the one they are using currently.\r\n */\r\nexport async function getNameHistory(uuid: string) {\r\n    return await _mojangApiGet(`/user/profiles/${uuid}/names`)\r\n}\r\n\r\n/**\r\n * Gets the name history of a player\r\n * @param {string} username - The username of the player\r\n * @returns {Object} - This will return all the usernames this user used in the past and the one they are using currently.\r\n */\r\nexport async function getNameHistoryByName(username: string) {\r\n    return await getUUID(username).then(async (data)=>{\r\n        return await getNameHistory(data.id)\r\n    })\r\n}\r\n\r\n/**\r\n * Gets the UUIDs for multiple players\r\n * @param {Array.<string>} names - An array with player names\r\n * @returns {Object} - This will return the UUID's and names of the players that are provided\r\n */\r\nexport async function getUUIDs(names: Array<string>) {\r\n    return await __mojangApiPost(\"/profiles/minecraft\", names)\r\n}\r\n\r\n/**\r\n * Gets the profile of a player\r\n * @param {string} uuid -  The UUID from the player\r\n * @returns {Object} - This will return the player's username and other additional information (e.g. skins)\r\n */\r\nexport async function getProfile(uuid: string) {\r\n    return await _get(`https://sessionserver.mojang.com/session/minecraft/profile/${uuid}`)\r\n}\r\n\r\n/**\r\n * Gets the profile of a player\r\n * @param {string} username - The username of the player\r\n * @returns {Object} - This will return the player's username and other additional information (e.g. skins)\r\n */\r\nexport async function getProfileByName(username: string) {\r\n    return await getUUID(username).then(async (data)=>{\r\n        return await getProfile(data.id)\r\n    })\r\n}\r\n\r\n/**\r\n * Gets the skin data of a player\r\n * @param {string} uuid -  The UUID from the player\r\n * @returns {Object} - This will return the player's skin information (e.g. skin url)\r\n */\r\nexport async function getSkinData(uuid: string) {\r\n    return await getProfile(uuid).then((data)=>{\r\n        return JSON.parse(Buffer.from(data.properties[0].value, 'base64').toString('ascii'))\r\n    })\r\n}\r\n\r\n/**\r\n * Gets the skin data of a player\r\n * @param {string} username - The username of the player\r\n * @returns {Object} - This will return the player's skin information (e.g. skin URL)\r\n */\r\nexport async function getSkinDataByName(username: string) {\r\n    return await getProfileByName(username).then((data)=>{\r\n        return JSON.parse(Buffer.from(data.properties[0].value, 'base64').toString('ascii'))\r\n    })\r\n}\r\n\r\n/**\r\n * Gets the skin URL of a player\r\n * @param {string} uuid -  The UUID from the player\r\n * @returns {string} - This will return the URL of the player skin\r\n */\r\nexport async function getSkinURL(uuid: string) {\r\n    return await getSkinData(uuid).then((data)=>{\r\n        return data.textures.SKIN.url\r\n    })\r\n}\r\n\r\n/**\r\n * Gets the skin URL of a player\r\n * @param {string} username - The username of the player\r\n * @returns {string} - This will return the URL of the player skin\r\n */\r\nexport async function getSkinURLByName(username: string) {\r\n    return await getSkinDataByName(username).then((data)=>{\r\n        return data.textures.SKIN.url\r\n    })\r\n}\r\n\r\nasync function getCroppedImage(skinURL: string, x: number, y: number, w: number, h: number) {\r\n    return new Promise(resolve=>{\r\n        clipper.loadImageFromUrl(skinURL, ()=>{\r\n            clipper.crop(x,y,w,h)\r\n            .toDataURL((dataURL: string)=>{\r\n                resolve(dataURL)\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\n/**\r\n * Gets the player head image of a player\r\n * @param {string} uuid -  The UUID from the player\r\n * @returns {string} - This will return a base64 string of the player head image (8x8)\r\n */\r\nexport async function getPlayerHead(uuid: string) {\r\n    return await getSkinURL(uuid).then(async url=>{\r\n        let layer1 = await getCroppedImage(url, 8,8,8,8).then(head=>{\r\n            return head\r\n        })\r\n        let layer2 = await getCroppedImage(url, 40,8,8,8).then(head=>{\r\n            return head\r\n        })\r\n        return [layer1, layer2]\r\n    }).then(async layers=>{\r\n        let cnv = canvas.createCanvas(8,8)\r\n        let ctx = cnv.getContext(\"2d\")\r\n        ctx.imageSmoothingEnabled = false\r\n        ctx.fillRect(0,0,8,8)\r\n        canvas.loadImage(<string>layers[0]).then(image=>{\r\n            ctx.drawImage(image, 0,0)\r\n            canvas.loadImage(<string>layers[1]).then(image=>{\r\n                ctx.drawImage(image, 0,0)\r\n            })\r\n        })\r\n        return cnv\r\n    }).then(canvas=>{\r\n        return canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\")\r\n    })\r\n}\r\n\r\n/**\r\n * Gets the player head image of a player\r\n * @param {string} username - The username of the player\r\n * @returns {string} - This will return a base64 string of the player head image (8x8)\r\n */\r\nexport async function getPlayerHeadByName(username: string) {\r\n    return await getSkinURLByName(username).then(async url=>{\r\n        let layer1 = await getCroppedImage(url, 8,8,8,8).then(head=>{\r\n            return head\r\n        })\r\n        let layer2 = await getCroppedImage(url, 40,8,8,8).then(head=>{\r\n            return head\r\n        })\r\n        return [layer1, layer2]\r\n    }).then(async layers=>{\r\n        let cnv = canvas.createCanvas(8,8)\r\n        let ctx = cnv.getContext(\"2d\")\r\n        ctx.imageSmoothingEnabled = false\r\n        ctx.fillRect(0,0,8,8)\r\n        canvas.loadImage(<string>layers[0]).then(image=>{\r\n            ctx.drawImage(image, 0,0)\r\n            canvas.loadImage(<string>layers[1]).then(image=>{\r\n                ctx.drawImage(image, 0,0)\r\n            })\r\n        })\r\n        return cnv\r\n    }).then(canvas=>{\r\n        return canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\")\r\n    })\r\n}"]},"metadata":{},"sourceType":"script"}