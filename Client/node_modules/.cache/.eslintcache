[{"E:\\Sites\\virusv4\\Client\\src\\index.tsx":"1","E:\\Sites\\virusv4\\Client\\src\\App.tsx":"2","E:\\Sites\\virusv4\\Client\\src\\pages\\homepage\\HomePage.tsx":"3","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollerpage\\ServerControllerHomePage.tsx":"4","E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\ServerPage.tsx":"5","E:\\Sites\\virusv4\\Client\\src\\pages\\controllerhome\\ControllerHomePage.tsx":"6","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\PlayerControllerPage.tsx":"7","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\extracontroller\\ExtraControllerPage.tsx":"8","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\servercontroller\\ServerControllerPage.tsx":"9","E:\\Sites\\virusv4\\Client\\src\\globaltsx\\Header.tsx":"10","E:\\Sites\\virusv4\\Client\\src\\globaltsx\\NavTab.tsx":"11","E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\components\\ServerList.tsx":"12","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\components\\PlayerList.tsx":"13","E:\\Sites\\virusv4\\Client\\src\\IpAddress.js":"14","E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\components\\ServerTab.tsx":"15","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\components\\Player.tsx":"16","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\FeatureButton.tsx":"17","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\OperatorPanel.tsx":"18","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\GamemodePanel.tsx":"19","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\CrashPanel.tsx":"20","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\KickPanel.tsx":"21","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\TeleportPanel.tsx":"22","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\WhitelistPanel.tsx":"23","E:\\Sites\\virusv4\\Client\\src\\socket\\socket.tsx":"24","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\loggingcontroller\\LogginControllerPage.tsx":"25","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\KillPanel.tsx":"26","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\BanPanel.tsx":"27","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\PMSpamPanel.tsx":"28","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\LeakPanel.tsx":"29","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\SpelerDataPanel.tsx":"30","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\InventoryPanel.tsx":"31","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\inventorycomonents\\Item.tsx":"32","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\inventorycomonents\\PlayerInventoryPane.tsx":"33","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\inventorycomonents\\SavedItemsPane.tsx":"34","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\inventorycomonents\\SavedItem.tsx":"35"},{"size":294,"mtime":1653423137476,"results":"36","hashOfConfig":"37"},{"size":1636,"mtime":1654009542450,"results":"38","hashOfConfig":"37"},{"size":582,"mtime":1653424369402,"results":"39","hashOfConfig":"37"},{"size":1264,"mtime":1654009323679,"results":"40","hashOfConfig":"37"},{"size":447,"mtime":1653489428377,"results":"41","hashOfConfig":"37"},{"size":979,"mtime":1653490581767,"results":"42","hashOfConfig":"37"},{"size":7018,"mtime":1654357133569,"results":"43","hashOfConfig":"37"},{"size":108,"mtime":1653491064119,"results":"44","hashOfConfig":"37"},{"size":110,"mtime":1653491062151,"results":"45","hashOfConfig":"37"},{"size":492,"mtime":1653489573424,"results":"46","hashOfConfig":"37"},{"size":476,"mtime":1653490556983,"results":"47","hashOfConfig":"37"},{"size":1399,"mtime":1654025096093,"results":"48","hashOfConfig":"37"},{"size":1696,"mtime":1654193688054,"results":"49","hashOfConfig":"37"},{"size":162,"mtime":1650628152609,"results":"50","hashOfConfig":"37"},{"size":3315,"mtime":1654367460389,"results":"51","hashOfConfig":"37"},{"size":2712,"mtime":1654090819375,"results":"52","hashOfConfig":"37"},{"size":414,"mtime":1653506181604,"results":"53","hashOfConfig":"37"},{"size":2200,"mtime":1654008521949,"results":"54","hashOfConfig":"37"},{"size":2998,"mtime":1654355253216,"results":"55","hashOfConfig":"37"},{"size":1940,"mtime":1654030405066,"results":"56","hashOfConfig":"37"},{"size":2261,"mtime":1654008467029,"results":"57","hashOfConfig":"37"},{"size":4090,"mtime":1654008489033,"results":"58","hashOfConfig":"37"},{"size":2173,"mtime":1654008501672,"results":"59","hashOfConfig":"37"},{"size":182,"mtime":1654008515745,"results":"60","hashOfConfig":"37"},{"size":2267,"mtime":1654026268980,"results":"61","hashOfConfig":"37"},{"size":2310,"mtime":1654031616428,"results":"62","hashOfConfig":"37"},{"size":4685,"mtime":1654114621980,"results":"63","hashOfConfig":"37"},{"size":5529,"mtime":1654115673742,"results":"64","hashOfConfig":"37"},{"size":1936,"mtime":1654117058671,"results":"65","hashOfConfig":"37"},{"size":6079,"mtime":1654546943710,"results":"66","hashOfConfig":"37"},{"size":5246,"mtime":1654529811482,"results":"67","hashOfConfig":"37"},{"size":3592,"mtime":1654530452978,"results":"68","hashOfConfig":"37"},{"size":980,"mtime":1654527865228,"results":"69","hashOfConfig":"37"},{"size":1371,"mtime":1654542979949,"results":"70","hashOfConfig":"37"},{"size":3225,"mtime":1654543548418,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"1eb4i1i",{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"75"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"75"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"75"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"75"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"75"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"75"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"75"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"75"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"75"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"75"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"75"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"75"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"75"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"75"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"75"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"75"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Sites\\virusv4\\Client\\src\\index.tsx",[],[],[],"E:\\Sites\\virusv4\\Client\\src\\App.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\homepage\\HomePage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollerpage\\ServerControllerHomePage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\ServerPage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\controllerhome\\ControllerHomePage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\PlayerControllerPage.tsx",["195","196"],[],"import { useEffect, useState } from 'react';\r\nimport { Link, Navigate, useParams } from 'react-router-dom';\r\n\r\nimport PlayerList from './components/PlayerList';\r\nimport FeatureButton from './features/FeatureButton';\r\nimport OperatorPanel from './features/panels/OperatorPanel';\r\nimport './PlayerControllerPageStyling.scss';\r\n\r\nimport { FaUsers } from 'react-icons/fa';\r\n\r\nimport GamemodePanel from './features/panels/GamemodePanel';\r\nimport CrashPanel from './features/panels/CrashPanel';\r\nimport KickPanel from './features/panels/KickPanel';\r\nimport TeleportPanel from './features/panels/TeleportPanel';\r\nimport WhitelistPanel from './features/panels/WhitelistPanel';\r\nimport { socket } from '../../../socket/socket';\r\nimport KillPanel from './features/panels/KillPanel';\r\nimport BanPanel from './features/panels/BanPanel';\r\nimport PMSpamPanel from './features/panels/PMSpamPanel';\r\nimport LeakPanel from './features/panels/LeakPanel';\r\nimport SpelerDataPanel from './features/panels/SpelerDataPanel';\r\nimport InventoryPanel from './features/panels/InventoryPanel';\r\n\r\nfunction PlayerControllerPage(){\r\n    const { serverid } = useParams();\r\n    const [loadedPanel, setLoadedPanel] = useState<any>(null);\r\n\r\n    const [server, setServer] = useState<any>({});\r\n    const [selectedPlayer, setSelectedPlayer] = useState<any>(null);\r\n\r\n    useEffect(function loadServer(){\r\n        socket.emit(\"client:mcserver-get\", serverid)\r\n    }, []);\r\n    useEffect(function updateServer(){\r\n        socket.on(`server:mcserver-get`, data => {\r\n            setServer(JSON.parse(data.JsonData))\r\n        })\r\n    }, []);\r\n    useEffect(function checkServerStatus(){\r\n        socket.on(`server:disable-server`, data => {\r\n            if (data === null || data.Address === null || server === null || server.Address === null){\r\n                setServer(null);\r\n            }else if (data.Address === server.Address){\r\n                if (data.State == false)setServer(null);\r\n            }\r\n            \r\n        })\r\n    }, [server]);\r\n    function handleFeatureClick(panelName: any) {\r\n        if (selectedPlayer !== null)\r\n            setLoadedPanel(panelName);\r\n    }\r\n    function handlePlayerClick(player: any){\r\n        setSelectedPlayer(player);\r\n        if (player === null){\r\n            setLoadedPanel(null);\r\n        }\r\n    }\r\n    if(server === null){\r\n        return <Navigate to='/controller/servers' />\r\n    } else {\r\n        return (\r\n            <div className=\"controller-container\">\r\n                <div className=\"controller-players\">\r\n                    <div className=\"controller-players-header\">\r\n                        <div className='controller-players-header-icon'><FaUsers /></div>\r\n                        <div className='controller-players-header-playercount'>{server.MaxPlayers !== undefined ? server.OnlinePlayers + \" / \" + server.MaxPlayers : \"- / 0\"}</div>\r\n                        <Link className='controller-players-header-back' to={'/controller/servers/' + serverid}>\r\n                            Ga terug\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"controller-players-list\">\r\n                        <PlayerList \r\n                            server={server} \r\n                            onPlayerClick={handlePlayerClick} \r\n                            selectedPlayer={selectedPlayer} /> \r\n                    </div>\r\n                </div>\r\n                <div className=\"controller-features\">\r\n                    <FeatureButton title='Operator' description=\"Instellingen voor het beheren van de operator status van de speler\" onClick={() => handleFeatureClick(<OperatorPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Gamemode' description=\"Pas de gamemode aan van de speler\" onClick={() => handleFeatureClick(<GamemodePanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Crash' description=\"Laat de speler zijn client crashen\" onClick={() => handleFeatureClick(<CrashPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Kick' description=\"Kick de speler van de server\" onClick={() => handleFeatureClick(<KickPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Teleport' description=\"Teleporteer de speler naar een bepaalde locatie\" onClick={() => handleFeatureClick(<TeleportPanel player={selectedPlayer} Address={server.Address} />)} />\r\n                    <FeatureButton title='Whitelist' description=\"Pas de whitelist status van de speler aan\" onClick={() => handleFeatureClick(<WhitelistPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Kill' description=\"Vermoord de speler\" onClick={() => handleFeatureClick(<KillPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Ban' description=\"Verban de speler van de server\" onClick={() => handleFeatureClick(<BanPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Private Message Spam' description=\"Spam de speler vol met verschillende willekeurige berichten\" onClick={() => handleFeatureClick(<PMSpamPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Leaken' description=\"Leak de gegevens van de speler zijn account\" onClick={() => handleFeatureClick(<LeakPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Irriteren' description=\"Irriteer de speler met wat toys\" onClick={() => handleFeatureClick(<LeakPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Speler Data' description=\"Bekijk al de informatie over de speler\" onClick={() => handleFeatureClick(<SpelerDataPanel player={selectedPlayer} server={server} />)} />\r\n                    <FeatureButton title='Inventory' description=\"Bekijk en pas de inventarissen van de speler aan\" onClick={() => handleFeatureClick(<InventoryPanel player={selectedPlayer} server={server} />)} />\r\n                    <FeatureButton title='Money' description=\"Pas het saldo van de speler aan\" onClick={() => handleFeatureClick(<LeakPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Experience' description=\"Geef de speler experience of verwijder ze\" onClick={() => handleFeatureClick(<LeakPanel player={selectedPlayer} />)} />\r\n                    <FeatureButton title='Auto Kicker' description=\"Zorgt ervoor dat de speler niet meer in staat is de server te joinen. Hij zal telkens gekicked worden.\" onClick={() => handleFeatureClick(<LeakPanel player={selectedPlayer} />)} />\r\n                </div>\r\n                <div className=\"controller-panel\">\r\n                    {\r\n                        loadedPanel !== null && selectedPlayer !== null ?\r\n                        loadedPanel : //Laadt panel in\r\n                        <>Selecteer een speler</> //Laad panel niet in, maar geef instructie\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default PlayerControllerPage;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\extracontroller\\ExtraControllerPage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\servercontroller\\ServerControllerPage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\globaltsx\\Header.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\globaltsx\\NavTab.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\components\\ServerList.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\components\\PlayerList.tsx",["197","198"],[],"import { useEffect, useState } from \"react\";\r\nimport { socket } from \"../../../../socket/socket\";\r\nimport Player from './Player';\r\n\r\nfunction PlayerList(props: {server: any, onPlayerClick: any, selectedPlayer: any;}){\r\n    const [players, setPlayers] = useState<any>([]);\r\n    const [validSelected, setValidSelected] = useState<boolean>(false);\r\n\r\n    useEffect(function loadPlayers(){\r\n        if (props.server.Address !== undefined){\r\n            socket.emit(\"client:server-player-list\", props.server.Address);\r\n        }\r\n    }, [props.server]);\r\n    useEffect(function updatePlayers(){\r\n        socket.on(`server:mcserver-player-list`, data => {\r\n            JSON.parse(data).map((player: { Displayname: any; }) => {\r\n                if (props.selectedPlayer !== null){\r\n                    if (player.Displayname === props.selectedPlayer.Displayname){\r\n                        setValidSelected(true);\r\n                    }\r\n                }\r\n            });\r\n            if (!validSelected){\r\n                props.onPlayerClick(null);\r\n            }\r\n            setPlayers(JSON.parse(data));\r\n        })\r\n    }, []);\r\n    if (players.length <= 0){\r\n        return (\"Geen spelers online!\")\r\n    }else{\r\n        return (\r\n            players.map((player: { UUID: any; Displayname: any; }) => \r\n                <div key={player.UUID}>\r\n                    {\r\n                    <Player \r\n                        player={player} \r\n                        onPlayerClick={props.onPlayerClick} \r\n                        selectedPlayer={props.selectedPlayer}\r\n                    />\r\n                    }\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}\r\nexport default PlayerList;","E:\\Sites\\virusv4\\Client\\src\\IpAddress.js",[],[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\components\\ServerTab.tsx",["199","200"],[],"import { Button, Tooltip } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { FaCheckCircle } from \"react-icons/fa\";\r\nimport { FaMinusCircle } from \"react-icons/fa\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { socket } from \"../../../socket/socket\";\r\n\r\nimport './styling/ServerTab.scss';\r\n\r\nfunction ServerTab(props: {server: any;}){\r\n    const [serverImage, setServerImage] = useState(JSON.parse(props.server.Image).Image);\r\n    const [serverName, setServerName] = useState(props.server.Name);\r\n    const [serverState, setServerState] = useState(props.server.State);\r\n    const [serverID, setServerID] = useState(props.server.id);\r\n    const [serverMOTD, setServerMOTD] = useState(props.server.MOTD);\r\n    const [serverMax, setServerMax] = useState(props.server.MaxPlayers);\r\n    const [serverVersion, setServerVersion] = useState(props.server.Version);\r\n    const [serverJsonData, setServerJsonData] = useState(props.server.JsonData);\r\n    const [serverOnlinePlayers, setServerOnlineP] = useState(serverJsonData.OnlinePlayers);\r\n\r\n    useEffect(function updateData(){\r\n        setServerImage(JSON.parse(props.server.Image).Image)\r\n        setServerName(props.server.Name)\r\n        setServerState(props.server.State)\r\n        setServerID(props.server.id)\r\n        setServerMOTD(props.server.MOTD)\r\n        setServerMax(props.server.MaxPlayers)\r\n        setServerOnlineP(JSON.parse(props.server.JsonData).OnlinePlayers)\r\n        setServerVersion(props.server.Version)\r\n        setServerJsonData(JSON.parse(props.server.JsonData))\r\n    }, [props.server]);\r\n\r\n    function handleServerConnect(){\r\n        socket.emit(\"client:saved-items\", serverName);\r\n    }\r\n    return (\r\n        <div className=\"servertab\">\r\n            <div className='servertab-id'>{serverID}</div>\r\n            <div className='servertab-verticalline'>|</div>\r\n            <Tooltip title={serverVersion}>\r\n                <div className='servertab-image'><img src={serverImage} /></div>\r\n            </Tooltip>\r\n            <div className='servertab-verticalline'>|</div>\r\n            <Tooltip title={serverMOTD}>\r\n                <div className='servertab-ip'>{serverName}</div>\r\n            </Tooltip>\r\n            <div className='servertab-verticalline'>|</div>\r\n            <div className='servertab-players'>{serverOnlinePlayers === undefined ? \"- / \" + serverMax : serverOnlinePlayers + \" / \" + serverMax}</div>\r\n            \r\n            {serverState === 1 ?\r\n                <>\r\n                    <div className='servertab-verticalline'>|</div>\r\n                    <Link to={'/controller/servers/' + serverID}>\r\n                        <Button className='servertab-beheren' variant=\"contained\" >\r\n                            Beheren\r\n                        </Button>\r\n                    </Link>\r\n                </> : \r\n                <></>\r\n            }\r\n            <div className='servertab-verticalline'>|</div>\r\n            {serverState === 1 ?\r\n                <Tooltip title=\"Server OFF!\"><div className='servertab-state' style={{color: 'lime'}}><FaCheckCircle /></div></Tooltip> :\r\n                <Tooltip title=\"Server ON!\"><div className='servertab-state' style={{color: 'red'}}><FaMinusCircle /></div></Tooltip>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default ServerTab;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\components\\Player.tsx",["201","202","203","204","205"],[],"import { Tooltip } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport IpAddress from \"../../../../IpAddress\";\r\n\r\nimport './PlayerStyling.scss';\r\n\r\nfunction Player(props: {player: any, onPlayerClick: any, selectedPlayer: any;}){\r\n    const [background, setBackground] = useState<string>(\"white\");\r\n    const [player, setPlayer] = useState<any>(props.player);\r\n    const [icon, setIcon] = useState<any>();\r\n\r\n    useEffect(function loadPlayerIcon() {\r\n        var ip = new IpAddress();\r\n        fetch(`http://${ip.getIP()}:8080/minecraft/player/icon`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({Displayname: player.Displayname})\r\n        }).then(res => res.text())\r\n        .then(text => {\r\n            setIcon(text)\r\n        });\r\n    }, []);\r\n    useEffect(function updateBackground(){\r\n        if (props.selectedPlayer != null){\r\n            if (props.selectedPlayer.Displayname === player.Displayname){\r\n                if (background === \"lime\"){\r\n                    setBackground(\"white\");\r\n                    props.onPlayerClick(null)\r\n                }else setBackground(\"lime\");\r\n            }else setBackground(\"white\");\r\n        }else setBackground(\"white\");\r\n    }, [props.selectedPlayer]);\r\n    function copyToClipboard(ip: string){\r\n        alert(\"Gekopieerd naar je clipboard!\")\r\n        setTimeout(async()=>await window.navigator.clipboard.writeText(ip), 3000)\r\n    }\r\n    function onPlayerClick(){\r\n        if (props.selectedPlayer === player)\r\n            props.onPlayerClick(null);\r\n        else props.onPlayerClick(player);\r\n    }\r\n    return (\r\n        <div className=\"playertab noselect\" style={{backgroundColor: background}} onClick={onPlayerClick}>\r\n            <div className=\"playertab-icon\"><img src={icon} /></div>\r\n            <div className='playertab-verticalline'>|</div>\r\n            <Tooltip title={\"UUID: \" + player.UUID}>\r\n                <div className=\"playertab-playername\">{player.Displayname}</div>\r\n            </Tooltip>\r\n            <div className='playertab-verticalline'>|</div>\r\n            <Tooltip title='Player operator status'>\r\n                <div className=\"playertab-status\">OP: {player.Op == true ? <>Ja</> : <>Neen</>}</div>\r\n            </Tooltip> \r\n            <div className='playertab-verticalline'>|</div>\r\n            <Tooltip onClick={() => copyToClipboard(player.Ip)} title={<div style={{ textAlign: 'center' }}>Het publiek IP van de speler<br />Click om naar het klipbord te kopiëren</div>}>\r\n                <div className=\"playertab-ip\">Ip: {player.Ip}</div>\r\n            </Tooltip> \r\n        </div>\r\n    );\r\n}\r\nexport default Player;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\FeatureButton.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\OperatorPanel.tsx",["206"],[],"import { Tooltip } from '@mui/material';\r\nimport './OperatorPanelStyle.scss';\r\nimport './PanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nfunction OperatorPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n    function setPlayerOpStatus(status: boolean){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"OP\",\r\n            Status: status\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Operator Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='operatorpanel-container'>\r\n                <div className='operatorpanel-buttons'>\r\n                    <Tooltip title='Geef de geselecteerde speler operator' onClick={() => setPlayerOpStatus(true)}>\r\n                        <div className='operatorpanel-buttons-button'>Geef Operator</div>\r\n                    </Tooltip>\r\n                    <Tooltip title='Haal de operator bij de speler weg' onClick={() => setPlayerOpStatus(false)}>\r\n                        <div className='operatorpanel-buttons-button'>Neem Operator Weg</div>\r\n                    </Tooltip>\r\n                </div>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default OperatorPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\GamemodePanel.tsx",["207"],[],"import { Tooltip } from '@mui/material';\r\n\r\nimport './GamemodePanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nimport { FaRegLightbulb } from 'react-icons/fa';\r\nimport { FaHandsHelping } from 'react-icons/fa';\r\nimport { FaRegEye } from 'react-icons/fa';\r\nimport { FaBaby } from 'react-icons/fa';\r\n\r\nfunction GamemodePanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n    function setPlayerGamemode(gamemode: string){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"gamemode\",\r\n            Gamemode: gamemode\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Gamemode Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='gamemodepanel-container'>\r\n                <div className='gamemodepanel-buttons'>\r\n                    <Tooltip title='Verander de gamemode van de speler naar creative' onClick={() => setPlayerGamemode(\"creative\")}>\r\n                        <div className='gamemodepanel-buttons-button'><FaRegLightbulb />Gamemode Creative</div>\r\n                    </Tooltip>\r\n                    <Tooltip title='Verander de gamemode van de speler naar survival' onClick={() => setPlayerGamemode(\"survival\")}>\r\n                        <div className='gamemodepanel-buttons-button'><FaHandsHelping />Gamemode Survival</div>\r\n                    </Tooltip>\r\n                    <Tooltip title='Verander de gamemode van de speler naar spectator' onClick={() => setPlayerGamemode(\"spectator\")}>\r\n                        <div className='gamemodepanel-buttons-button'><FaRegEye />Gamemode Spectator</div>\r\n                    </Tooltip>\r\n                    <Tooltip title='Verander de gamemode van de speler naar adventure' onClick={() => setPlayerGamemode(\"adventure\")}>\r\n                        <div className='gamemodepanel-buttons-button'><FaBaby />Gamemode Adventure</div>\r\n                    </Tooltip>\r\n                </div>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default GamemodePanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\CrashPanel.tsx",["208"],[],"import { Tooltip } from '@mui/material';\r\nimport './PanelStyle.scss';\r\n\r\nimport './CrashPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nimport { FaCarCrash } from 'react-icons/fa';\r\n\r\nfunction CrashPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n    function crashPlayer(){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"crash\"\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Crash Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='crashpanel-container'>\r\n                <div className='crashpanel-buttons'>\r\n                    <Tooltip title='Laat de speler zijn client crashen' onClick={() => crashPlayer()}>\r\n                        <div className='crashpanel-buttons-button'><FaCarCrash />Crash speler</div>\r\n                    </Tooltip>\r\n                </div>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default CrashPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\KickPanel.tsx",["209"],[],"import { Tooltip } from '@mui/material';\r\nimport './OperatorPanelStyle.scss';\r\nimport './KickPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nfunction KickPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [kickMessage, setKickMessage] = useState<string>(\"\");\r\n\r\n    function kickPlayer(message: string, e: any){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"kick\",\r\n            Message: message\r\n        }\r\n        setKickMessage(\"\");\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    function handleMessageChange (e: any) {\r\n        setKickMessage(e.target.value)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Kick Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='kickpanel-container'>\r\n                <form className='kickpanel-form'>\r\n                    <input type=\"text\" onChange={handleMessageChange} placeholder=\"Geef het kick bericht...\" value={kickMessage} />\r\n                    <Tooltip title='Laat de speler zijn client crashen' onClick={(e) => kickPlayer(kickMessage, e)}>\r\n                        <div className='kickpanel-form-button'>Kick de speler</div>\r\n                    </Tooltip>\r\n                </form>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default KickPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\TeleportPanel.tsx",["210","211"],[],"import { Tooltip } from '@mui/material';\r\n\r\nimport './TeleportPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nfunction TeleportPanel(props: {player: any, Address: string;}){\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    \r\n    const [worlds, setWorlds] = useState<any>([]);\r\n\r\n    const [world, setWorld] = useState<string>();\r\n    const [x, setX] = useState<number>();\r\n    const [y, setY] = useState<number>();\r\n    const [z, setZ] = useState<number>();\r\n\r\n\r\n    function teleportPlayer(){\r\n        const location = {\r\n            World: world,\r\n            X: x,\r\n            Y: y,\r\n            Z: z\r\n        }\r\n        if(location.World === undefined || location.X === undefined || location.Y === undefined || location.Z === undefined){\r\n            setError(true);\r\n            setInfoMessage(\"Geef al de data in!\");\r\n            return;\r\n        }\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"teleport\",\r\n            Location: location\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    useEffect(function loadWorlds(){\r\n        socket.emit(\"client:mcserver-getworlds\", props.Address);\r\n    }, []);\r\n    useEffect(function updateWorlds(){\r\n        socket.on(\"server:mcserver-getworlds-list\", data => {\r\n            setWorlds(data.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\"));\r\n        });\r\n    }, []);\r\n    useEffect(function updateActiveWorld(){\r\n        if(worlds.length > 0) setWorld(worlds[0]);\r\n    }, [worlds]);\r\n\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n\r\n    function handleWorldChange (e: any) {\r\n        setWorld(e.target.value);\r\n    }\r\n    function handleXChange(e: any){\r\n        setX(e.target.value)\r\n    }\r\n    function handleYChange(e: any){\r\n        setY(e.target.value)\r\n    }\r\n    function handleZChange(e: any){\r\n        setZ(e.target.value)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Teleport Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='teleportpanel-container'>\r\n                <form className='teleportpanel-form'>\r\n                    <label>World:</label>\r\n                    <select id='world-container' name=\"worlds\" onChange={handleWorldChange}>\r\n                        {worlds.map(function(world: string){\r\n                            return (<option key={world}>{world}</option>);\r\n                        })}\r\n                    </select>\r\n                    <label>X Coördinaat:</label>\r\n                    <input type=\"text\" onChange={handleXChange} placeholder=\"Geef de X coördinaat\" />\r\n                    <label>Y Coördinaat:</label>\r\n                    <input type=\"text\" onChange={handleYChange} placeholder=\"Geef de Ycoördinaat\" />\r\n                    <label>Z Coördinaat:</label>\r\n                    <input type=\"text\" onChange={handleZChange} placeholder=\"Geef de Z coördinaat\" />\r\n\r\n                    <Tooltip title='Teleporteer de speler naar deze locatie' onClick={() => teleportPlayer()}>\r\n                        <div className='teleportpanel-form-button'>Teleporteer speler</div>\r\n                    </Tooltip>\r\n                </form>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default TeleportPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\WhitelistPanel.tsx",["212"],[],"import { Tooltip } from '@mui/material';\r\n\r\nimport './WhitelistPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nfunction WhitelistPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    \r\n    const [whitelisted, setWhitelisted] = useState<boolean>(false);\r\n\r\n    function handlePlayerWhitelist(state: boolean){\r\n        setWhitelisted(state);\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"whitelist\",\r\n            Status: whitelisted\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Whitelist Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='whitelistpanel-container'>\r\n                <Tooltip title='Whitelist de speler' onClick={() => handlePlayerWhitelist(true)}>\r\n                    <div className='whitelistpanel-form-button'>Whitelist Speler</div>\r\n                </Tooltip>\r\n                <Tooltip title='Un Whitelist de speler' onClick={() => handlePlayerWhitelist(false)}>\r\n                    <div className='whitelistpanel-form-button'>UnWhitelist Speler</div>\r\n                </Tooltip>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default WhitelistPanel;","E:\\Sites\\virusv4\\Client\\src\\socket\\socket.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\loggingcontroller\\LogginControllerPage.tsx",["213","214","215","216","217","218"],[],"import { JSXElementConstructor, ReactElement, ReactFragment, ReactPortal, useEffect, useRef, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { socket } from \"../../../socket/socket\";\r\n\r\nimport './LogginControllerPageStyle.scss'\r\n\r\nfunction LogginControllerPage(){\r\n    const [messages, setMessages] = useState<any>([]);\r\n    const { serverid } = useParams();\r\n    const [server, setServer] = useState<any>([]);\r\n\r\n    const divRef = useRef<null | HTMLDivElement>(null);\r\n\r\n    useEffect(function loadServer(){\r\n        socket.emit(\"client:mcserver-get\", serverid)\r\n    }, []);\r\n    useEffect(function updateServer(){\r\n        socket.on(`server:mcserver-get`, data => {\r\n            setServer(JSON.parse(data.JsonData))\r\n            socket.emit(\"client:get-server-logs\", data.Name)\r\n        })\r\n    }, []);\r\n    useEffect(function updateLogs(){\r\n        socket.on(\"server:update-logging\", data => {\r\n            if (data.Servername === server.Address){\r\n                setMessages(data);\r\n            }\r\n        })\r\n    }, []);\r\n    useEffect(() => {\r\n        divRef.current?.scrollIntoView({ behavior: 'auto' });\r\n    }, [messages]);\r\n    return (\r\n        <div className=\"logging-container\">\r\n            <div className=\"logging-panel\">\r\n                <div className=\"logging-panel-message-container\">\r\n                    {messages.map((message: { Date: string; Message: string; }, index: number) => {\r\n                        return (<div key={index}>\r\n                        <div className=\"logging-panel-message-container-message\">\r\n                            <span className=\"logging-panel-message-container-message-date\">\r\n                                {new Date(message.Date).toLocaleTimeString() + \" - \"}\r\n                            </span>\r\n                            <span className=\"logging-panel-message-container-message\">\r\n                                {message.Message}\r\n                            </span>\r\n                            </div>\r\n                        </div>\r\n                            \r\n                        );\r\n                    })}\r\n                    <div ref={divRef} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default LogginControllerPage;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\KillPanel.tsx",["219"],[],"import { Tooltip } from '@mui/material';\r\nimport './PanelStyle.scss';\r\n\r\nimport './KillPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nimport { FaSkull } from 'react-icons/fa';\r\n\r\nfunction KillPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [deathNote, setDeathNote] = useState<string>(\"\");\r\n\r\n\r\n    function killPlayer(){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"kill\",\r\n            Message: deathNote\r\n        }\r\n        setDeathNote(\"\");\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    function handleDeathNoteChange (e: any) {\r\n        setDeathNote(e.target.value);\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Kill Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='killpanel-container'>\r\n                <form className='killpanel-form'>\r\n                        <input type=\"text\" onChange={handleDeathNoteChange} placeholder=\"Geef de deathnote mee...\" value={deathNote} />\r\n                        <Tooltip title='Zet de speler zijn health op 0' onClick={() => killPlayer()}>\r\n                            <div className='killpanel-form-button'><FaSkull style={{marginRight: 10}} />Vermoord speler</div>\r\n                        </Tooltip>\r\n                </form>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default KillPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\BanPanel.tsx",["220","221","222","223"],[],"import { Button, FormControl, FormLabel, Tooltip } from '@mui/material';\r\nimport './PanelStyle.scss';\r\n\r\nimport './BanPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nimport { DateTimePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport TextField from '@mui/material/TextField';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport frLocale from 'date-fns/locale/fr';\r\n\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\n\r\nfunction BanPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n    const [banMessage, setBanMessage] = useState<string>(\"\");\r\n    const [banDuration, setBanDuration] = useState<Date | null>(null);\r\n    const [typeBan, setTypeBan] = useState<string>(\"permban\");\r\n\r\n    function banPlayer(){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"ban\",\r\n            Message: banMessage,\r\n            To: new Date(banDuration + \" UTC\")?.toISOString()\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTypeBan((event.target as HTMLInputElement).value);\r\n        setBanDuration(null);\r\n    };\r\n    function handleMessageChange (e: any) {\r\n      setBanMessage(e.target.value);\r\n    };\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Crash Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='banpanel-container'>\r\n                <form className='banpanel-form'>\r\n                    <TextField className='banpanel-form-messagebox' id=\"standard-basic\" onChange={handleMessageChange} label=\"Ban message\" variant=\"standard\" value={banMessage} />\r\n                    <RadioGroup className='banpanel-mid'\r\n                        row\r\n                        aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                        defaultValue=\"permban\"\r\n                        name=\"radio-buttons-group\"\r\n                        onChange={handleChange}\r\n                    >\r\n                        <FormControlLabel value=\"permban\" control={<Radio />} label=\"Perm Banned\" />\r\n                        <FormControlLabel value=\"duration\" control={<Radio />} label=\"Time Banned\" />\r\n                        \r\n                        {typeBan === \"duration\" ?\r\n                            <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={frLocale} >\r\n                                    <DateTimePicker\r\n                                        minDate={new Date()}\r\n                                        InputProps={{ sx: { \r\n                                            width: \"200px\",\r\n                                         } }}\r\n                                        renderInput={(props) => <TextField {...props} />}\r\n                                        label=\"DateTimePicker\"\r\n                                        inputFormat=\"dd/MM/yyyy hh:mm\"\r\n                                        value={banDuration}\r\n                                        onChange={(newValue) => {\r\n                                        setBanDuration(newValue);\r\n                                        }}\r\n                                    />\r\n                                </LocalizationProvider>\r\n                             :\r\n                            <></>\r\n                        }\r\n                    </RadioGroup>\r\n                    <Button \r\n                    variant=\"outlined\"\r\n                    sx={{ width: \"100%\"} } onClick={banPlayer}>Speler Verbannen</Button>\r\n\r\n                </form>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default BanPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\PMSpamPanel.tsx",["224","225","226"],[],"import { Button, FormControl, InputLabel, Select, Tooltip } from '@mui/material';\r\nimport './PanelStyle.scss';\r\n\r\nimport './PMSpamPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nconst messagesList = [\r\n    'Als duizend schilders duizend jaar zouden werken, zouden ze geen kunstwerk kunnen maken dat net zo mooi is als jij.',\r\n    \"Als een dikke man je 's nachts in een tas stopt, maak je dan geen zorgen, ik heb de kerstman gevraagd dat ik je wilde hebben voor kerst.\",\r\n    \"Als een ster zo ver weg staat, hoe kan jij dan zo dichtbij komen?\",\r\n    \"Als ik je een cijfer zou moeten geven tussen 1-10, zou ik je een 9 geven omdat ik die ene ben die je nog mist.\",\r\n    \"Als ik een euro kreeg voor elke keer dat ik aan jou dacht, dan zou ik nu in een hogere belastingschijf zitten.\",\r\n    \"Als ik het alfabet opnieuw zou kunnen rangschikken, zou ik de J van jij en de I van ik samen zetten.\",\r\n    \"Als in mijn dromen de enige plaats was waar ik je kon zien, dan zou ik eeuwig slapen.\",\r\n    \"Als je denkt mij te kunnen versieren, dan heb je het goed!\",\r\n    \"Als jij een boom zou zijn, zou ik je omarmen als een koala beertje.\",\r\n    \"Als niets eeuwig duurt, word jij dan mijn niets?\",\r\n    \"Als schoonheid tijd was, zou jij de eeuwigheid zijn.\",\r\n    \"Bel de politie, want het moet wel illegaal zijn om er zo goed uit te zien.\",\r\n    \"Ben je gelovig? Omdat je het antwoord bent op al mijn gebeden.\",\r\n    \"Ben jij mijn telefoonoplader? Want zonder jou zou ik sterven.\",\r\n    \"Bent jij misschien een woordenboek? Omdat je de betekenis toevoegt aan mijn leven.\",\r\n    \"Ben jij niet moe? Want je loopt al uren rondjes in mijn gedachten.\",\r\n    \"Deed het pijn toen je uit de hemel viel?\",\r\n    \"Die kleding staat je echt heel mooi.\",\r\n    \"Die mooie jurk kleurt goed bij mijn auto.\",\r\n    \"Droom ik, of komt dat door jou?\",\r\n    \"Er is iets mis met mijn telefoon, jouw nummer staat er niet in!\",\r\n    \"Er is maar één ding dat ik zou willen veranderen aan je, en dat is je achternaam.\",\r\n    \"Er is vast iets mis met mijn ogen, want ik kan ze niet van je afhouden.\",\r\n    \"Er zijn honderden openingszinnen, als jij me nou eens zegt welke werkt?\",\r\n    \"Ga je me nog kussen of moet ik tegen mijn dagboek liegen?\",\r\n    \"Geen wonder dat de lucht vandaag zo grijs en grauw is, al het blauw zit in je ogen.\",\r\n    \"Geloof je in liefde op het eerste gezicht, of moet ik nog een keer langslopen?\",\r\n    \"Haal een ijsklontje uit je drankje en smijt die kapot op de grond en zeg tegen haar: Zo nu is het ijs gebroken!\",\r\n  ];\r\n  \r\n\r\nfunction PMSpamPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n    const [value, setValue] = useState<string[]>([]);\r\n\r\n    function startPlayerSpamming(status: boolean){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"pmspam\",\r\n            Messages: messagesList.toString(),\r\n            State: status\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Private Message Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='pmspampanel-container'>\r\n                <div className='pmspampanel-buttons'>\r\n                <FormControl className='pmspampanel-form'>\r\n                    <InputLabel shrink htmlFor=\"select-multiple-native\">\r\n                    Berichten\r\n                    </InputLabel>\r\n                    <Select\r\n                        multiple\r\n                        native\r\n                        value={value}\r\n                        label=\"Berichten\"\r\n                        className='pmspampanel-form-select'\r\n                        inputProps={{ \r\n                            id: 'select-multiple-native',\r\n                            size: 15,\r\n                         }}\r\n                        >\r\n                        {messagesList.map((message) => (\r\n                            <option key={message} value={message}>\r\n                                {message}\r\n                            </option>\r\n                        ))}\r\n                    </Select>\r\n                    <Button \r\n                    variant=\"outlined\"\r\n                    sx={{ width: \"100%\", margin: \"10px 0\"} } onClick={() => startPlayerSpamming(true)}>Start Spamming</Button>\r\n                           <Button \r\n                    variant=\"outlined\"\r\n                    sx={{ width: \"100%\"} } onClick={() => startPlayerSpamming(false)}>Stop Spamming</Button>\r\n                </FormControl>\r\n                </div>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default PMSpamPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\LeakPanel.tsx",["227"],[],"import { Tooltip } from '@mui/material';\r\nimport './PanelStyle.scss';\r\n\r\nimport './LeakPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nimport { FaFileUpload } from 'react-icons/fa';\r\n\r\nfunction LeakPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n    function leakPlayer(){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"leak\"\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Leak Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='leakpanel-container'>\r\n                <div className='leakpanel-buttons'>\r\n                    <Tooltip title='Leak de data van de speler in de chat' onClick={() => leakPlayer()}>\r\n                        <div className='leakpanel-buttons-button'><FaFileUpload />Leak Speler</div>\r\n                    </Tooltip>\r\n                </div>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default LeakPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\SpelerDataPanel.tsx",["228","229","230","231","232","233","234","235","236","237"],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\InventoryPanel.tsx",["238","239","240","241"],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\inventorycomonents\\Item.tsx",["242"],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\inventorycomonents\\PlayerInventoryPane.tsx",["243"],[],"import Item from \"./Item\";\r\n\r\nimport './PlayerInventoryPaneStyle.scss';\r\n\r\nfunction PlayerInventoryPane(props: {items: any[], itemList: any[], inventoryAction: any;}){\r\n    return (\r\n        <div className='inventory-panel'>\r\n            <div className=\"inventory-panel-items\">\r\n                {props.items.map((item: any, index: number) => {\r\n                    var sendItem = item.ItemstackJson;\r\n                    props.itemList.map((listitem:any) => {\r\n                        if (!item.Empty){\r\n                            if (listitem.id === \"minecraft:\" + sendItem.type.toString().toLowerCase()){\r\n                                sendItem.texture = listitem.texture;\r\n                            }\r\n                        }     \r\n                    })\r\n                    return <Item key={index} itemstack={sendItem} inventoryAction={props.inventoryAction} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default PlayerInventoryPane; ","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\inventorycomonents\\SavedItemsPane.tsx",["244"],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\inventorycomonents\\SavedItem.tsx",["245","246","247"],[],{"ruleId":"248","severity":1,"message":"249","line":33,"column":8,"nodeType":"250","endLine":33,"endColumn":10,"suggestions":"251"},{"ruleId":"252","severity":1,"message":"253","line":44,"column":32,"nodeType":"254","messageId":"255","endLine":44,"endColumn":34},{"ruleId":"256","severity":1,"message":"257","line":16,"column":66,"nodeType":"258","messageId":"259","endLine":16,"endColumn":68},{"ruleId":"248","severity":1,"message":"260","line":28,"column":8,"nodeType":"250","endLine":28,"endColumn":10,"suggestions":"261"},{"ruleId":"262","severity":1,"message":"263","line":35,"column":14,"nodeType":"264","messageId":"265","endLine":35,"endColumn":33},{"ruleId":"266","severity":1,"message":"267","line":43,"column":50,"nodeType":"268","endLine":43,"endColumn":75},{"ruleId":"262","severity":1,"message":"269","line":9,"column":20,"nodeType":"264","messageId":"265","endLine":9,"endColumn":29},{"ruleId":"248","severity":1,"message":"270","line":22,"column":8,"nodeType":"250","endLine":22,"endColumn":10,"suggestions":"271"},{"ruleId":"248","severity":1,"message":"272","line":32,"column":8,"nodeType":"250","endLine":32,"endColumn":30,"suggestions":"273"},{"ruleId":"266","severity":1,"message":"267","line":44,"column":45,"nodeType":"268","endLine":44,"endColumn":63},{"ruleId":"252","severity":1,"message":"253","line":51,"column":66,"nodeType":"254","messageId":"255","endLine":51,"endColumn":68},{"ruleId":"248","severity":1,"message":"274","line":26,"column":8,"nodeType":"250","endLine":26,"endColumn":10,"suggestions":"275"},{"ruleId":"248","severity":1,"message":"274","line":31,"column":8,"nodeType":"250","endLine":31,"endColumn":10,"suggestions":"276"},{"ruleId":"248","severity":1,"message":"274","line":28,"column":8,"nodeType":"250","endLine":28,"endColumn":10,"suggestions":"277"},{"ruleId":"248","severity":1,"message":"274","line":28,"column":8,"nodeType":"250","endLine":28,"endColumn":10,"suggestions":"278"},{"ruleId":"248","severity":1,"message":"274","line":45,"column":8,"nodeType":"250","endLine":45,"endColumn":10,"suggestions":"279"},{"ruleId":"248","severity":1,"message":"280","line":48,"column":8,"nodeType":"250","endLine":48,"endColumn":10,"suggestions":"281"},{"ruleId":"248","severity":1,"message":"274","line":29,"column":8,"nodeType":"250","endLine":29,"endColumn":10,"suggestions":"282"},{"ruleId":"262","severity":1,"message":"283","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":31},{"ruleId":"262","severity":1,"message":"284","line":1,"column":33,"nodeType":"264","messageId":"265","endLine":1,"endColumn":45},{"ruleId":"262","severity":1,"message":"285","line":1,"column":47,"nodeType":"264","messageId":"265","endLine":1,"endColumn":60},{"ruleId":"262","severity":1,"message":"286","line":1,"column":62,"nodeType":"264","messageId":"265","endLine":1,"endColumn":73},{"ruleId":"248","severity":1,"message":"249","line":16,"column":8,"nodeType":"250","endLine":16,"endColumn":10,"suggestions":"287"},{"ruleId":"248","severity":1,"message":"288","line":29,"column":8,"nodeType":"250","endLine":29,"endColumn":10,"suggestions":"289"},{"ruleId":"248","severity":1,"message":"274","line":32,"column":8,"nodeType":"250","endLine":32,"endColumn":10,"suggestions":"290"},{"ruleId":"262","severity":1,"message":"291","line":1,"column":18,"nodeType":"264","messageId":"265","endLine":1,"endColumn":29},{"ruleId":"262","severity":1,"message":"292","line":1,"column":31,"nodeType":"264","messageId":"265","endLine":1,"endColumn":40},{"ruleId":"262","severity":1,"message":"293","line":1,"column":42,"nodeType":"264","messageId":"265","endLine":1,"endColumn":49},{"ruleId":"248","severity":1,"message":"274","line":41,"column":8,"nodeType":"250","endLine":41,"endColumn":10,"suggestions":"294"},{"ruleId":"262","severity":1,"message":"293","line":1,"column":51,"nodeType":"264","messageId":"265","endLine":1,"endColumn":58},{"ruleId":"262","severity":1,"message":"295","line":45,"column":19,"nodeType":"264","messageId":"265","endLine":45,"endColumn":27},{"ruleId":"248","severity":1,"message":"274","line":62,"column":8,"nodeType":"250","endLine":62,"endColumn":10,"suggestions":"296"},{"ruleId":"248","severity":1,"message":"274","line":28,"column":8,"nodeType":"250","endLine":28,"endColumn":10,"suggestions":"297"},{"ruleId":"262","severity":1,"message":"293","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":17},{"ruleId":"248","severity":1,"message":"274","line":22,"column":8,"nodeType":"250","endLine":22,"endColumn":10,"suggestions":"298"},{"ruleId":"248","severity":1,"message":"299","line":37,"column":8,"nodeType":"250","endLine":37,"endColumn":10,"suggestions":"300"},{"ruleId":"301","severity":1,"message":"302","line":49,"column":22,"nodeType":"264","messageId":"303","endLine":49,"endColumn":23},{"ruleId":"301","severity":1,"message":"302","line":52,"column":22,"nodeType":"264","messageId":"303","endLine":52,"endColumn":23},{"ruleId":"248","severity":1,"message":"304","line":56,"column":8,"nodeType":"250","endLine":56,"endColumn":10,"suggestions":"305"},{"ruleId":"256","severity":1,"message":"306","line":88,"column":83,"nodeType":"258","messageId":"307","endLine":88,"endColumn":85},{"ruleId":"266","severity":1,"message":"267","line":90,"column":52,"nodeType":"268","endLine":90,"endColumn":132},{"ruleId":"266","severity":1,"message":"267","line":92,"column":52,"nodeType":"268","endLine":92,"endColumn":132},{"ruleId":"266","severity":1,"message":"267","line":94,"column":52,"nodeType":"268","endLine":94,"endColumn":133},{"ruleId":"262","severity":1,"message":"308","line":8,"column":8,"nodeType":"264","messageId":"265","endLine":8,"endColumn":12},{"ruleId":"248","severity":1,"message":"274","line":21,"column":8,"nodeType":"250","endLine":21,"endColumn":10,"suggestions":"309"},{"ruleId":"248","severity":1,"message":"299","line":43,"column":8,"nodeType":"250","endLine":43,"endColumn":10,"suggestions":"310"},{"ruleId":"256","severity":1,"message":"257","line":48,"column":44,"nodeType":"258","messageId":"259","endLine":48,"endColumn":46},{"ruleId":"266","severity":1,"message":"267","line":55,"column":29,"nodeType":"268","endLine":55,"endColumn":98},{"ruleId":"256","severity":1,"message":"257","line":11,"column":55,"nodeType":"258","messageId":"259","endLine":11,"endColumn":57},{"ruleId":"248","severity":1,"message":"311","line":14,"column":8,"nodeType":"250","endLine":14,"endColumn":10,"suggestions":"312"},{"ruleId":"262","severity":1,"message":"313","line":8,"column":26,"nodeType":"264","messageId":"265","endLine":8,"endColumn":37},{"ruleId":"262","severity":1,"message":"314","line":13,"column":23,"nodeType":"264","messageId":"265","endLine":13,"endColumn":35},{"ruleId":"266","severity":1,"message":"267","line":55,"column":25,"nodeType":"268","endLine":55,"endColumn":88},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'serverid'. Either include it or remove the dependency array.","ArrayExpression",["315"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'props' and 'validSelected'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["316"],"@typescript-eslint/no-unused-vars","'handleServerConnect' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setPlayer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'player.Displayname'. Either include it or remove the dependency array.",["317"],"React Hook useEffect has missing dependencies: 'background', 'player.Displayname', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["318"],"React Hook useEffect has a missing dependency: 'setInfoMessage'. Either include it or remove the dependency array.",["319"],["320"],["321"],["322"],["323"],"React Hook useEffect has a missing dependency: 'props.Address'. Either include it or remove the dependency array.",["324"],["325"],"'JSXElementConstructor' is defined but never used.","'ReactElement' is defined but never used.","'ReactFragment' is defined but never used.","'ReactPortal' is defined but never used.",["326"],"React Hook useEffect has a missing dependency: 'server.Address'. Either include it or remove the dependency array.",["327"],["328"],"'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'Tooltip' is defined but never used.",["329"],"'setValue' is assigned a value but never used.",["330"],["331"],["332"],"React Hook useEffect has missing dependencies: 'props.player' and 'props.server.Address'. Either include them or remove the dependency array.",["333"],"@typescript-eslint/no-redeclare","'i' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'props.player.UUID'. Either include it or remove the dependency array.",["334"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Item' is defined but never used.",["335"],["336"],"React Hook useEffect has a missing dependency: 'props.player.Servername'. Either include it or remove the dependency array.",["337"],"'MenuDivider' is defined but never used.","'setItemstack' is assigned a value but never used.",{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"346","fix":"348"},{"desc":"346","fix":"349"},{"desc":"346","fix":"350"},{"desc":"346","fix":"351"},{"desc":"352","fix":"353"},{"desc":"346","fix":"354"},{"desc":"338","fix":"355"},{"desc":"356","fix":"357"},{"desc":"346","fix":"358"},{"desc":"346","fix":"359"},{"desc":"346","fix":"360"},{"desc":"346","fix":"361"},{"desc":"346","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"346","fix":"367"},{"desc":"363","fix":"368"},{"desc":"369","fix":"370"},"Update the dependencies array to be: [serverid]",{"range":"371","text":"372"},"Update the dependencies array to be: [props, validSelected]",{"range":"373","text":"374"},"Update the dependencies array to be: [player.Displayname]",{"range":"375","text":"376"},"Update the dependencies array to be: [background, player.Displayname, props, props.selectedPlayer]",{"range":"377","text":"378"},"Update the dependencies array to be: [setInfoMessage]",{"range":"379","text":"380"},{"range":"381","text":"380"},{"range":"382","text":"380"},{"range":"383","text":"380"},{"range":"384","text":"380"},"Update the dependencies array to be: [props.Address]",{"range":"385","text":"386"},{"range":"387","text":"380"},{"range":"388","text":"372"},"Update the dependencies array to be: [server.Address]",{"range":"389","text":"390"},{"range":"391","text":"380"},{"range":"392","text":"380"},{"range":"393","text":"380"},{"range":"394","text":"380"},{"range":"395","text":"380"},"Update the dependencies array to be: [props.player, props.server.Address]",{"range":"396","text":"397"},"Update the dependencies array to be: [props.player.UUID]",{"range":"398","text":"399"},{"range":"400","text":"380"},{"range":"401","text":"397"},"Update the dependencies array to be: [props.player.Servername]",{"range":"402","text":"403"},[1432,1434],"[serverid]",[1121,1123],"[props, validSelected]",[846,848],"[player.Displayname]",[1287,1309],"[background, player.Displayname, props, props.selectedPlayer]",[861,863],"[setInfoMessage]",[1033,1035],[858,860],[961,963],[1448,1450],[1565,1567],"[props.Address]",[959,961],[604,606],[1055,1057],"[server.Address]",[974,976],[1536,1538],[3352,3354],[856,858],[761,763],[1209,1211],"[props.player, props.server.Address]",[2067,2069],"[props.player.UUID]",[832,834],[1538,1540],[425,427],"[props.player.Servername]"]