[{"E:\\Sites\\virusv4\\Client\\src\\index.tsx":"1","E:\\Sites\\virusv4\\Client\\src\\App.tsx":"2","E:\\Sites\\virusv4\\Client\\src\\pages\\homepage\\HomePage.tsx":"3","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollerpage\\ServerControllerHomePage.tsx":"4","E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\ServerPage.tsx":"5","E:\\Sites\\virusv4\\Client\\src\\pages\\controllerhome\\ControllerHomePage.tsx":"6","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\PlayerControllerPage.tsx":"7","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\extracontroller\\ExtraControllerPage.tsx":"8","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\servercontroller\\ServerControllerPage.tsx":"9","E:\\Sites\\virusv4\\Client\\src\\globaltsx\\Header.tsx":"10","E:\\Sites\\virusv4\\Client\\src\\globaltsx\\NavTab.tsx":"11","E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\components\\ServerList.tsx":"12","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\components\\PlayerList.tsx":"13","E:\\Sites\\virusv4\\Client\\src\\IpAddress.js":"14","E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\components\\ServerTab.tsx":"15","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\components\\Player.tsx":"16","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\FeatureButton.tsx":"17","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\OperatorPanel.tsx":"18","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\GamemodePanel.tsx":"19","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\CrashPanel.tsx":"20","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\KickPanel.tsx":"21","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\TeleportPanel.tsx":"22","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\WhitelistPanel.tsx":"23","E:\\Sites\\virusv4\\Client\\src\\socket\\socket.tsx":"24","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\loggingcontroller\\LogginControllerPage.tsx":"25","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\KillPanel.tsx":"26","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\BanPanel.tsx":"27","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\PMSpamPanel.tsx":"28","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\LeakPanel.tsx":"29"},{"size":294,"mtime":1653423137476,"results":"30","hashOfConfig":"31"},{"size":1636,"mtime":1654009542450,"results":"32","hashOfConfig":"31"},{"size":582,"mtime":1653424369402,"results":"33","hashOfConfig":"31"},{"size":1264,"mtime":1654009323679,"results":"34","hashOfConfig":"31"},{"size":447,"mtime":1653489428377,"results":"35","hashOfConfig":"31"},{"size":979,"mtime":1653490581767,"results":"36","hashOfConfig":"31"},{"size":6687,"mtime":1654116838267,"results":"37","hashOfConfig":"31"},{"size":108,"mtime":1653491064119,"results":"38","hashOfConfig":"31"},{"size":110,"mtime":1653491062151,"results":"39","hashOfConfig":"31"},{"size":492,"mtime":1653489573424,"results":"40","hashOfConfig":"31"},{"size":476,"mtime":1653490556983,"results":"41","hashOfConfig":"31"},{"size":1399,"mtime":1654025096093,"results":"42","hashOfConfig":"31"},{"size":1553,"mtime":1654104314712,"results":"43","hashOfConfig":"31"},{"size":162,"mtime":1650628152609,"results":"44","hashOfConfig":"31"},{"size":3163,"mtime":1653643179480,"results":"45","hashOfConfig":"31"},{"size":2712,"mtime":1654090819375,"results":"46","hashOfConfig":"31"},{"size":414,"mtime":1653506181604,"results":"47","hashOfConfig":"31"},{"size":2200,"mtime":1654008521949,"results":"48","hashOfConfig":"31"},{"size":2998,"mtime":1654029112025,"results":"49","hashOfConfig":"31"},{"size":1940,"mtime":1654030405066,"results":"50","hashOfConfig":"31"},{"size":2261,"mtime":1654008467029,"results":"51","hashOfConfig":"31"},{"size":4090,"mtime":1654008489033,"results":"52","hashOfConfig":"31"},{"size":2173,"mtime":1654008501672,"results":"53","hashOfConfig":"31"},{"size":182,"mtime":1654008515745,"results":"54","hashOfConfig":"31"},{"size":2267,"mtime":1654026268980,"results":"55","hashOfConfig":"31"},{"size":2310,"mtime":1654031616428,"results":"56","hashOfConfig":"31"},{"size":4685,"mtime":1654114621980,"results":"57","hashOfConfig":"31"},{"size":5529,"mtime":1654115673742,"results":"58","hashOfConfig":"31"},{"size":1936,"mtime":1654117058671,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"1eb4i1i",{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"63"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"63"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"63"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"63"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"63"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"63"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"63"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"63"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"63"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Sites\\virusv4\\Client\\src\\index.tsx",[],[],[],"E:\\Sites\\virusv4\\Client\\src\\App.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\homepage\\HomePage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollerpage\\ServerControllerHomePage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\ServerPage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\controllerhome\\ControllerHomePage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\PlayerControllerPage.tsx",["158","159"],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\extracontroller\\ExtraControllerPage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\servercontroller\\ServerControllerPage.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\globaltsx\\Header.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\globaltsx\\NavTab.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\components\\ServerList.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\components\\PlayerList.tsx",["160","161"],[],"E:\\Sites\\virusv4\\Client\\src\\IpAddress.js",[],[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\serverpage\\components\\ServerTab.tsx",["162"],[],"import { Button, Tooltip } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { FaCheckCircle } from \"react-icons/fa\";\r\nimport { FaMinusCircle } from \"react-icons/fa\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './styling/ServerTab.scss';\r\n\r\nfunction ServerTab(props: {server: any;}){\r\n    const [serverImage, setServerImage] = useState(JSON.parse(props.server.Image).Image);\r\n    const [serverName, setServerName] = useState(props.server.Name);\r\n    const [serverState, setServerState] = useState(props.server.State);\r\n    const [serverID, setServerID] = useState(props.server.id);\r\n    const [serverMOTD, setServerMOTD] = useState(props.server.MOTD);\r\n    const [serverMax, setServerMax] = useState(props.server.MaxPlayers);\r\n    const [serverVersion, setServerVersion] = useState(props.server.Version);\r\n    const [serverJsonData, setServerJsonData] = useState(props.server.JsonData);\r\n    const [serverOnlinePlayers, setServerOnlineP] = useState(serverJsonData.OnlinePlayers);\r\n\r\n    useEffect(function updateData(){\r\n        setServerImage(JSON.parse(props.server.Image).Image)\r\n        setServerName(props.server.Name)\r\n        setServerState(props.server.State)\r\n        setServerID(props.server.id)\r\n        setServerMOTD(props.server.MOTD)\r\n        setServerMax(props.server.MaxPlayers)\r\n        setServerOnlineP(JSON.parse(props.server.JsonData).OnlinePlayers)\r\n        setServerVersion(props.server.Version)\r\n        setServerJsonData(JSON.parse(props.server.JsonData))\r\n    }, [props.server]);\r\n\r\n    return (\r\n        <div className=\"servertab\">\r\n            <div className='servertab-id'>{serverID}</div>\r\n            <div className='servertab-verticalline'>|</div>\r\n            <Tooltip title={serverVersion}>\r\n                <div className='servertab-image'><img src={serverImage} /></div>\r\n            </Tooltip>\r\n            <div className='servertab-verticalline'>|</div>\r\n            <Tooltip title={serverMOTD}>\r\n                <div className='servertab-ip'>{serverName}</div>\r\n            </Tooltip>\r\n            <div className='servertab-verticalline'>|</div>\r\n            <div className='servertab-players'>{serverOnlinePlayers === undefined ? \"- / \" + serverMax : serverOnlinePlayers + \" / \" + serverMax}</div>\r\n            \r\n            {serverState === 1 ?\r\n                <>\r\n                    <div className='servertab-verticalline'>|</div>\r\n                    <Link to={'/controller/servers/' + serverID}>\r\n                        <Button className='servertab-beheren' variant=\"contained\" >\r\n                            Beheren\r\n                        </Button>\r\n                    </Link>\r\n                </> : \r\n                <></>\r\n            }\r\n            <div className='servertab-verticalline'>|</div>\r\n            {serverState === 1 ?\r\n                <Tooltip title=\"Server OFF!\"><div className='servertab-state' style={{color: 'lime'}}><FaCheckCircle /></div></Tooltip> :\r\n                <Tooltip title=\"Server ON!\"><div className='servertab-state' style={{color: 'red'}}><FaMinusCircle /></div></Tooltip>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default ServerTab;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\components\\Player.tsx",["163","164","165","166","167"],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\FeatureButton.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\OperatorPanel.tsx",["168"],[],"import { Tooltip } from '@mui/material';\r\nimport './OperatorPanelStyle.scss';\r\nimport './PanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nfunction OperatorPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n    function setPlayerOpStatus(status: boolean){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"OP\",\r\n            Status: status\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Operator Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='operatorpanel-container'>\r\n                <div className='operatorpanel-buttons'>\r\n                    <Tooltip title='Geef de geselecteerde speler operator' onClick={() => setPlayerOpStatus(true)}>\r\n                        <div className='operatorpanel-buttons-button'>Geef Operator</div>\r\n                    </Tooltip>\r\n                    <Tooltip title='Haal de operator bij de speler weg' onClick={() => setPlayerOpStatus(false)}>\r\n                        <div className='operatorpanel-buttons-button'>Neem Operator Weg</div>\r\n                    </Tooltip>\r\n                </div>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default OperatorPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\GamemodePanel.tsx",["169"],[],"import { Tooltip } from '@mui/material';\r\n\r\nimport './GamemodePanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nimport { FaRegLightbulb } from 'react-icons/fa';\r\nimport { FaHandsHelping } from 'react-icons/fa';\r\nimport { FaRegEye } from 'react-icons/fa';\r\nimport { FaBaby } from 'react-icons/fa';\r\n\r\nfunction GamemodePanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n    function setPlayerGamemode(gamemode: string){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"gamemode\",\r\n            Gamemode: gamemode\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Gamemode Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='gamemodepanel-container'>\r\n                <div className='gamemodepanel-buttons'>\r\n                    <Tooltip title='Verander de gamemode van de speler naar creative' onClick={() => setPlayerGamemode(\"creative\")}>\r\n                        <div className='gamemodepanel-buttons-button'><FaRegLightbulb />Gamemode Creative</div>\r\n                    </Tooltip>\r\n                    <Tooltip title='Verander de gamemode van de speler naar survival' onClick={() => setPlayerGamemode(\"survival\")}>\r\n                        <div className='gamemodepanel-buttons-button'><FaHandsHelping />Gamemode Survival</div>\r\n                    </Tooltip>\r\n                    <Tooltip title='Verander de gamemode van de speler naar spectator' onClick={() => setPlayerGamemode(\"spectator\")}>\r\n                        <div className='gamemodepanel-buttons-button'><FaRegEye />Gamemode Spectator</div>\r\n                    </Tooltip>\r\n                    <Tooltip title='Verander de gamemode van de speler naar adventure' onClick={() => setPlayerGamemode(\"adventure\")}>\r\n                        <div className='gamemodepanel-buttons-button'><FaBaby />Gamemode Adventure</div>\r\n                    </Tooltip>\r\n                </div>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default GamemodePanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\CrashPanel.tsx",["170"],[],"import { Tooltip } from '@mui/material';\r\nimport './PanelStyle.scss';\r\n\r\nimport './CrashPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nimport { FaCarCrash } from 'react-icons/fa';\r\n\r\nfunction CrashPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n\r\n    function crashPlayer(){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"crash\"\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Crash Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='crashpanel-container'>\r\n                <div className='crashpanel-buttons'>\r\n                    <Tooltip title='Laat de speler zijn client crashen' onClick={() => crashPlayer()}>\r\n                        <div className='crashpanel-buttons-button'><FaCarCrash />Crash speler</div>\r\n                    </Tooltip>\r\n                </div>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default CrashPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\KickPanel.tsx",["171"],[],"import { Tooltip } from '@mui/material';\r\nimport './OperatorPanelStyle.scss';\r\nimport './KickPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nfunction KickPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [kickMessage, setKickMessage] = useState<string>(\"\");\r\n\r\n    function kickPlayer(message: string, e: any){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"kick\",\r\n            Message: message\r\n        }\r\n        setKickMessage(\"\");\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    function handleMessageChange (e: any) {\r\n        setKickMessage(e.target.value)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Kick Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='kickpanel-container'>\r\n                <form className='kickpanel-form'>\r\n                    <input type=\"text\" onChange={handleMessageChange} placeholder=\"Geef het kick bericht...\" value={kickMessage} />\r\n                    <Tooltip title='Laat de speler zijn client crashen' onClick={(e) => kickPlayer(kickMessage, e)}>\r\n                        <div className='kickpanel-form-button'>Kick de speler</div>\r\n                    </Tooltip>\r\n                </form>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default KickPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\TeleportPanel.tsx",["172","173"],[],"import { Tooltip } from '@mui/material';\r\n\r\nimport './TeleportPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nfunction TeleportPanel(props: {player: any, Address: string;}){\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    \r\n    const [worlds, setWorlds] = useState<any>([]);\r\n\r\n    const [world, setWorld] = useState<string>();\r\n    const [x, setX] = useState<number>();\r\n    const [y, setY] = useState<number>();\r\n    const [z, setZ] = useState<number>();\r\n\r\n\r\n    function teleportPlayer(){\r\n        const location = {\r\n            World: world,\r\n            X: x,\r\n            Y: y,\r\n            Z: z\r\n        }\r\n        if(location.World === undefined || location.X === undefined || location.Y === undefined || location.Z === undefined){\r\n            setError(true);\r\n            setInfoMessage(\"Geef al de data in!\");\r\n            return;\r\n        }\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"teleport\",\r\n            Location: location\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    useEffect(function loadWorlds(){\r\n        socket.emit(\"client:mcserver-getworlds\", props.Address);\r\n    }, []);\r\n    useEffect(function updateWorlds(){\r\n        socket.on(\"server:mcserver-getworlds-list\", data => {\r\n            setWorlds(data.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\"));\r\n        });\r\n    }, []);\r\n    useEffect(function updateActiveWorld(){\r\n        if(worlds.length > 0) setWorld(worlds[0]);\r\n    }, [worlds]);\r\n\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n\r\n    function handleWorldChange (e: any) {\r\n        setWorld(e.target.value);\r\n    }\r\n    function handleXChange(e: any){\r\n        setX(e.target.value)\r\n    }\r\n    function handleYChange(e: any){\r\n        setY(e.target.value)\r\n    }\r\n    function handleZChange(e: any){\r\n        setZ(e.target.value)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Teleport Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='teleportpanel-container'>\r\n                <form className='teleportpanel-form'>\r\n                    <label>World:</label>\r\n                    <select id='world-container' name=\"worlds\" onChange={handleWorldChange}>\r\n                        {worlds.map(function(world: string){\r\n                            return (<option key={world}>{world}</option>);\r\n                        })}\r\n                    </select>\r\n                    <label>X Coördinaat:</label>\r\n                    <input type=\"text\" onChange={handleXChange} placeholder=\"Geef de X coördinaat\" />\r\n                    <label>Y Coördinaat:</label>\r\n                    <input type=\"text\" onChange={handleYChange} placeholder=\"Geef de Ycoördinaat\" />\r\n                    <label>Z Coördinaat:</label>\r\n                    <input type=\"text\" onChange={handleZChange} placeholder=\"Geef de Z coördinaat\" />\r\n\r\n                    <Tooltip title='Teleporteer de speler naar deze locatie' onClick={() => teleportPlayer()}>\r\n                        <div className='teleportpanel-form-button'>Teleporteer speler</div>\r\n                    </Tooltip>\r\n                </form>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default TeleportPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\WhitelistPanel.tsx",["174"],[],"import { Tooltip } from '@mui/material';\r\n\r\nimport './WhitelistPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nfunction WhitelistPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    \r\n    const [whitelisted, setWhitelisted] = useState<boolean>(false);\r\n\r\n    function handlePlayerWhitelist(state: boolean){\r\n        setWhitelisted(state);\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"whitelist\",\r\n            Status: whitelisted\r\n        }\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Whitelist Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='whitelistpanel-container'>\r\n                <Tooltip title='Whitelist de speler' onClick={() => handlePlayerWhitelist(true)}>\r\n                    <div className='whitelistpanel-form-button'>Whitelist Speler</div>\r\n                </Tooltip>\r\n                <Tooltip title='Un Whitelist de speler' onClick={() => handlePlayerWhitelist(false)}>\r\n                    <div className='whitelistpanel-form-button'>UnWhitelist Speler</div>\r\n                </Tooltip>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default WhitelistPanel;","E:\\Sites\\virusv4\\Client\\src\\socket\\socket.tsx",[],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\loggingcontroller\\LogginControllerPage.tsx",["175","176","177","178","179","180"],[],"import { JSXElementConstructor, ReactElement, ReactFragment, ReactPortal, useEffect, useRef, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { socket } from \"../../../socket/socket\";\r\n\r\nimport './LogginControllerPageStyle.scss'\r\n\r\nfunction LogginControllerPage(){\r\n    const [messages, setMessages] = useState<any>([]);\r\n    const { serverid } = useParams();\r\n    const [server, setServer] = useState<any>([]);\r\n\r\n    const divRef = useRef<null | HTMLDivElement>(null);\r\n\r\n    useEffect(function loadServer(){\r\n        socket.emit(\"client:mcserver-get\", serverid)\r\n    }, []);\r\n    useEffect(function updateServer(){\r\n        socket.on(`server:mcserver-get`, data => {\r\n            setServer(JSON.parse(data.JsonData))\r\n            socket.emit(\"client:get-server-logs\", data.Name)\r\n        })\r\n    }, []);\r\n    useEffect(function updateLogs(){\r\n        socket.on(\"server:update-logging\", data => {\r\n            if (data.Servername === server.Address){\r\n                setMessages(data);\r\n            }\r\n        })\r\n    }, []);\r\n    useEffect(() => {\r\n        divRef.current?.scrollIntoView({ behavior: 'auto' });\r\n    }, [messages]);\r\n    return (\r\n        <div className=\"logging-container\">\r\n            <div className=\"logging-panel\">\r\n                <div className=\"logging-panel-message-container\">\r\n                    {messages.map((message: { Date: string; Message: string; }, index: number) => {\r\n                        return (<div key={index}>\r\n                        <div className=\"logging-panel-message-container-message\">\r\n                            <span className=\"logging-panel-message-container-message-date\">\r\n                                {new Date(message.Date).toLocaleTimeString() + \" - \"}\r\n                            </span>\r\n                            <span className=\"logging-panel-message-container-message\">\r\n                                {message.Message}\r\n                            </span>\r\n                            </div>\r\n                        </div>\r\n                            \r\n                        );\r\n                    })}\r\n                    <div ref={divRef} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default LogginControllerPage;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\KillPanel.tsx",["181"],[],"import { Tooltip } from '@mui/material';\r\nimport './PanelStyle.scss';\r\n\r\nimport './KillPanelStyle.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { socket } from '../../../../../socket/socket';\r\n\r\nimport { FaSkull } from 'react-icons/fa';\r\n\r\nfunction KillPanel(props: {player: any;}){\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [deathNote, setDeathNote] = useState<string>(\"\");\r\n\r\n\r\n    function killPlayer(){\r\n        var data = {\r\n            Player: props.player,\r\n            Feature: \"kill\",\r\n            Message: deathNote\r\n        }\r\n        setDeathNote(\"\");\r\n        socket.emit(\"client:features-change\", data);\r\n    }\r\n    useEffect(function listenMessages(){\r\n        socket.on(`server:features-change-message`, data => {\r\n            if (data.includes(\"fout\"))setError(true);\r\n            else setError(false);\r\n            setInfoMessage(data);\r\n        })\r\n    }, []);\r\n    function setInfoMessage(data: string){\r\n        setMessage(data);\r\n        setTimeout(function(){\r\n            if (message !== data)\r\n                setMessage(\"\");\r\n        }, 5000)\r\n    }\r\n    function handleDeathNoteChange (e: any) {\r\n        setDeathNote(e.target.value);\r\n    }\r\n    return (\r\n        <>\r\n            <div className='panel-header'>\r\n                Kill Panel - {props.player.Displayname}\r\n            </div>\r\n            <div className='panel-line'></div>\r\n            <div className='killpanel-container'>\r\n                <form className='killpanel-form'>\r\n                        <input type=\"text\" onChange={handleDeathNoteChange} placeholder=\"Geef de deathnote mee...\" value={deathNote} />\r\n                        <Tooltip title='Zet de speler zijn health op 0' onClick={() => killPlayer()}>\r\n                            <div className='killpanel-form-button'><FaSkull style={{marginRight: 10}} />Vermoord speler</div>\r\n                        </Tooltip>\r\n                </form>\r\n                {error ? \r\n                <div className='message' style={{color: 'red'}}>{message}</div> :  \r\n                 <div className='message' style={{color: \"lime\"}}>{message}</div>\r\n                 }\r\n                \r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\nexport default KillPanel;","E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\BanPanel.tsx",["182","183","184","185"],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\PMSpamPanel.tsx",["186","187","188"],[],"E:\\Sites\\virusv4\\Client\\src\\pages\\servercontrollers\\playercontroller\\features\\panels\\LeakPanel.tsx",["189"],[],{"ruleId":"190","severity":1,"message":"191","line":31,"column":8,"nodeType":"192","endLine":31,"endColumn":10,"suggestions":"193"},{"ruleId":"194","severity":1,"message":"195","line":40,"column":32,"nodeType":"196","messageId":"197","endLine":40,"endColumn":34},{"ruleId":"198","severity":1,"message":"199","line":16,"column":66,"nodeType":"200","messageId":"201","endLine":16,"endColumn":68},{"ruleId":"190","severity":1,"message":"202","line":28,"column":8,"nodeType":"192","endLine":28,"endColumn":10,"suggestions":"203"},{"ruleId":"204","severity":1,"message":"205","line":38,"column":50,"nodeType":"206","endLine":38,"endColumn":75},{"ruleId":"207","severity":1,"message":"208","line":9,"column":20,"nodeType":"209","messageId":"210","endLine":9,"endColumn":29},{"ruleId":"190","severity":1,"message":"211","line":22,"column":8,"nodeType":"192","endLine":22,"endColumn":10,"suggestions":"212"},{"ruleId":"190","severity":1,"message":"213","line":32,"column":8,"nodeType":"192","endLine":32,"endColumn":30,"suggestions":"214"},{"ruleId":"204","severity":1,"message":"205","line":44,"column":45,"nodeType":"206","endLine":44,"endColumn":63},{"ruleId":"194","severity":1,"message":"195","line":51,"column":66,"nodeType":"196","messageId":"197","endLine":51,"endColumn":68},{"ruleId":"190","severity":1,"message":"215","line":26,"column":8,"nodeType":"192","endLine":26,"endColumn":10,"suggestions":"216"},{"ruleId":"190","severity":1,"message":"215","line":31,"column":8,"nodeType":"192","endLine":31,"endColumn":10,"suggestions":"217"},{"ruleId":"190","severity":1,"message":"215","line":28,"column":8,"nodeType":"192","endLine":28,"endColumn":10,"suggestions":"218"},{"ruleId":"190","severity":1,"message":"215","line":28,"column":8,"nodeType":"192","endLine":28,"endColumn":10,"suggestions":"219"},{"ruleId":"190","severity":1,"message":"215","line":45,"column":8,"nodeType":"192","endLine":45,"endColumn":10,"suggestions":"220"},{"ruleId":"190","severity":1,"message":"221","line":48,"column":8,"nodeType":"192","endLine":48,"endColumn":10,"suggestions":"222"},{"ruleId":"190","severity":1,"message":"215","line":29,"column":8,"nodeType":"192","endLine":29,"endColumn":10,"suggestions":"223"},{"ruleId":"207","severity":1,"message":"224","line":1,"column":10,"nodeType":"209","messageId":"210","endLine":1,"endColumn":31},{"ruleId":"207","severity":1,"message":"225","line":1,"column":33,"nodeType":"209","messageId":"210","endLine":1,"endColumn":45},{"ruleId":"207","severity":1,"message":"226","line":1,"column":47,"nodeType":"209","messageId":"210","endLine":1,"endColumn":60},{"ruleId":"207","severity":1,"message":"227","line":1,"column":62,"nodeType":"209","messageId":"210","endLine":1,"endColumn":73},{"ruleId":"190","severity":1,"message":"191","line":16,"column":8,"nodeType":"192","endLine":16,"endColumn":10,"suggestions":"228"},{"ruleId":"190","severity":1,"message":"229","line":29,"column":8,"nodeType":"192","endLine":29,"endColumn":10,"suggestions":"230"},{"ruleId":"190","severity":1,"message":"215","line":32,"column":8,"nodeType":"192","endLine":32,"endColumn":10,"suggestions":"231"},{"ruleId":"207","severity":1,"message":"232","line":1,"column":18,"nodeType":"209","messageId":"210","endLine":1,"endColumn":29},{"ruleId":"207","severity":1,"message":"233","line":1,"column":31,"nodeType":"209","messageId":"210","endLine":1,"endColumn":40},{"ruleId":"207","severity":1,"message":"234","line":1,"column":42,"nodeType":"209","messageId":"210","endLine":1,"endColumn":49},{"ruleId":"190","severity":1,"message":"215","line":41,"column":8,"nodeType":"192","endLine":41,"endColumn":10,"suggestions":"235"},{"ruleId":"207","severity":1,"message":"234","line":1,"column":51,"nodeType":"209","messageId":"210","endLine":1,"endColumn":58},{"ruleId":"207","severity":1,"message":"236","line":45,"column":19,"nodeType":"209","messageId":"210","endLine":45,"endColumn":27},{"ruleId":"190","severity":1,"message":"215","line":62,"column":8,"nodeType":"192","endLine":62,"endColumn":10,"suggestions":"237"},{"ruleId":"190","severity":1,"message":"215","line":28,"column":8,"nodeType":"192","endLine":28,"endColumn":10,"suggestions":"238"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'serverid'. Either include it or remove the dependency array.","ArrayExpression",["239"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'props' and 'validSelected'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["240"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'setPlayer' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'player.Displayname'. Either include it or remove the dependency array.",["241"],"React Hook useEffect has missing dependencies: 'background', 'player.Displayname', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["242"],"React Hook useEffect has a missing dependency: 'setInfoMessage'. Either include it or remove the dependency array.",["243"],["244"],["245"],["246"],["247"],"React Hook useEffect has a missing dependency: 'props.Address'. Either include it or remove the dependency array.",["248"],["249"],"'JSXElementConstructor' is defined but never used.","'ReactElement' is defined but never used.","'ReactFragment' is defined but never used.","'ReactPortal' is defined but never used.",["250"],"React Hook useEffect has a missing dependency: 'server.Address'. Either include it or remove the dependency array.",["251"],["252"],"'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'Tooltip' is defined but never used.",["253"],"'setValue' is assigned a value but never used.",["254"],["255"],{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"264","fix":"266"},{"desc":"264","fix":"267"},{"desc":"264","fix":"268"},{"desc":"264","fix":"269"},{"desc":"270","fix":"271"},{"desc":"264","fix":"272"},{"desc":"256","fix":"273"},{"desc":"274","fix":"275"},{"desc":"264","fix":"276"},{"desc":"264","fix":"277"},{"desc":"264","fix":"278"},{"desc":"264","fix":"279"},"Update the dependencies array to be: [serverid]",{"range":"280","text":"281"},"Update the dependencies array to be: [props, validSelected]",{"range":"282","text":"283"},"Update the dependencies array to be: [player.Displayname]",{"range":"284","text":"285"},"Update the dependencies array to be: [background, player.Displayname, props, props.selectedPlayer]",{"range":"286","text":"287"},"Update the dependencies array to be: [setInfoMessage]",{"range":"288","text":"289"},{"range":"290","text":"289"},{"range":"291","text":"289"},{"range":"292","text":"289"},{"range":"293","text":"289"},"Update the dependencies array to be: [props.Address]",{"range":"294","text":"295"},{"range":"296","text":"289"},{"range":"297","text":"281"},"Update the dependencies array to be: [server.Address]",{"range":"298","text":"299"},{"range":"300","text":"289"},{"range":"301","text":"289"},{"range":"302","text":"289"},{"range":"303","text":"289"},[1302,1304],"[serverid]",[1121,1123],"[props, validSelected]",[846,848],"[player.Displayname]",[1287,1309],"[background, player.Displayname, props, props.selectedPlayer]",[861,863],"[setInfoMessage]",[1033,1035],[858,860],[961,963],[1448,1450],[1565,1567],"[props.Address]",[959,961],[604,606],[1055,1057],"[server.Address]",[974,976],[1536,1538],[3352,3354],[856,858]]